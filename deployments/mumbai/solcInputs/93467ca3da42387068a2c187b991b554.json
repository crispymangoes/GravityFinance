{
  "language": "Solidity",
  "sources": {
    "contracts/uniswapv2/interfaces/IPathOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n\ninterface IPathOracle {\n    /**\n     * Assume claimFee uses msg.sender, and returns the amount of WETH sent to the caller\n     */\n    function appendPath(address token0, address token1) external;\n\n    function stepPath(address from) external view returns(address to);\n}"
    },
    "contracts/uniswapv2/FeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/OZ_IERC20.sol\";\nimport \"./interfaces/IPathOracle.sol\";\nimport \"./interfaces/IPriceOracle.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\nimport \"./interfaces/iGovernance.sol\";\n\ncontract FeeManager is Ownable {\n    address[] public tokenList;\n    mapping(address => uint256) public tokenIndex;\n    address public factory;\n    mapping(address => bool) public whitelist;\n    IUniswapV2Factory Factory;\n\n    modifier onlyWhitelist() {\n        require(whitelist[msg.sender], \"Caller is not in whitelist!\");\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"Gravity Finance: FORBIDDEN\");\n        _;\n    }\n\n    /**\n    * @dev emitted when owner changes the whitelist\n    * @param _address the address that had its whitelist status changed\n    * @param newBool the new state of the address\n    **/\n    event whiteListChanged(address _address, bool newBool);\n\n    /**\n    * @dev emitted when catalougeTokens is called by factory\n    * @param token0 the first token address of the swap pair\n    * @param token1 the second token address of the swap pair\n    **/\n    event addTokens(address token0, address token1);\n\n    /**\n    * @dev emitted when fees are deposited into governance contract\n    * @param amountWETH the amount of wETH deposited into the governance contract\n    * @param amountWBTC the amount of wBTC deposited into the governance contract\n    **/\n    event feeDeposited(uint amountWETH, uint amountWBTC);\n\n    /** \n    * @dev emitted when the fee manager makes a swap\n    * @param from the address of the token it swapped from\n    * @param to the address of the token it swapped into\n    **/\n    event swapped(address from, address to);\n\n    /** \n    * @dev emitted when owner calls adminWithdraw\n    * @param asset the address of the asset that was moved out of the fee manager\n    **/\n    event AdminWithdrawCalled(address asset);\n\n    constructor(address _factory) {\n        tokenList.push(address(0)); //populate the 0 index with the zero address\n        factory = _factory;\n        Factory = IUniswapV2Factory(factory);\n    }\n\n    /**\n    * @dev called by owner to change the privelages for an address\n    * @param _address the address that you want its privelages changed\n    * @param _bool the new privelage for that address\n    **/\n    function adjustWhitelist(address _address, bool _bool) external onlyOwner {\n        whitelist[_address] = _bool;\n        emit whiteListChanged(_address, _bool);\n    }\n\n    /**\n    * @dev When swap pairs are created, add their tokens to the tokenList if not already in it\n    * @param token0 the first token address of the swap pair\n    * @param token1 the second token address of the swap pair\n    **/\n    function catalougeTokens(address token0, address token1) external onlyFactory{\n        if (tokenIndex[token0] == 0) {\n            tokenList.push(token0);\n            tokenIndex[token0] = tokenList.length - 1;\n        }\n\n        if (tokenIndex[token1] == 0) {\n            tokenList.push(token1);\n            tokenIndex[token1] = tokenList.length - 1;\n        }\n        emit addTokens(token0, token1);\n    }\n\n    /** \n    * @dev used to deposit wETH and wBTC into governance contract\n    **/\n    function deposit() external onlyWhitelist {\n        OZ_IERC20 weth = OZ_IERC20(Factory.weth());\n        OZ_IERC20 wbtc = OZ_IERC20(Factory.wbtc());\n        uint256 amountWETH = weth.balanceOf(address(this));\n        uint256 amountWBTC = wbtc.balanceOf(address(this));\n        weth.approve(Factory.governor(), amountWETH);\n        wbtc.approve(Factory.governor(), amountWBTC);\n        iGovernance(Factory.governor()).depositFee(amountWETH, amountWBTC);\n        emit feeDeposited(amountWETH, amountWBTC);\n    }\n\n    /** \n    * @dev used to get the time window for when it is valid to call oracleStepSwap without reverting\n    * @param asset the asset you want to convert into the next asset in the path\n    * @return valid expiration the unix timestamp for when price will be valid, and for when it will expire\n    **/\n    function validTimeWindow(address asset) external returns(uint valid, uint expiration){\n        IPriceOracle PriceOracle = IPriceOracle(Factory.priceOracle());\n        address nextAsset = IPathOracle(Factory.pathOracle()).stepPath(asset);\n        address pairAddress = Factory.getPair(asset, nextAsset);\n        \n        //Call get price\n        PriceOracle.getPrice(pairAddress);\n\n        (uint pairCurrentTime,) = PriceOracle.getOracleTime(pairAddress);\n        \n        expiration = pairCurrentTime + PriceOracle.priceValidEnd();\n        valid = pairCurrentTime + PriceOracle.priceValidStart();\n    }\n\n    /** \n    * @dev allows whitelist addresses to swap assets using oracles\n    * @param asset the address of the token you want to swap for the next asset in the PathOracle pathMap\n    * @param half a bool indicating whether or not to only swap half of the amount of the asset\n    **/\n    function oracleStepSwap(address asset, bool half) external onlyWhitelist{\n        uint tokenBal = OZ_IERC20(asset).balanceOf(address(this));\n        if(half){\n            tokenBal / 2;\n        }\n        address[] memory path = new address[](2);\n        address nextAsset = IPathOracle(Factory.pathOracle()).stepPath(asset);\n        address pairAddress = Factory.getPair(asset, nextAsset);\n        (uint minAmount, uint timeTillValid) = IPriceOracle(Factory.priceOracle())\n            .calculateMinAmount(asset, Factory.slippage(), tokenBal, pairAddress);\n        require(timeTillValid == 0, \"Price(s) not valid Call checkPrice()\");\n        OZ_IERC20(asset).approve(Factory.router(), tokenBal);\n        path[0] = asset;\n        path[1] = nextAsset;\n        IUniswapV2Router02(Factory.router()).swapExactTokensForTokens(\n            tokenBal,\n            minAmount,\n            path,\n            address(this),\n            block.timestamp\n        );\n        emit swapped(path[0], path[1]);\n    }\n\n    /** \n    * @dev allows whitelist addresses to swap assets by manually providing the minimum amount\n    * @param asset the address of the token you want to swap for the next asset in the PathOracle pathMap\n    * @param half a bool indicating whether or not to only swap half of the amount of the asset\n    * @param minAmount the minimum amount of the other asset the swap exchange should return\n    **/\n    function manualStepSwap(address asset, bool half, uint minAmount) external onlyWhitelist{\n\n        uint tokenBal = OZ_IERC20(asset).balanceOf(address(this));\n        if(half){\n            tokenBal / 2;\n        }\n        tokenBal = OZ_IERC20(asset).balanceOf(address(this));\n        address[] memory path = new address[](2);\n        address nextAsset = IPathOracle(Factory.pathOracle()).stepPath(asset);\n        OZ_IERC20(asset).approve(Factory.router(), tokenBal);\n        path[0] = asset;\n        path[1] = nextAsset;\n        IUniswapV2Router02(Factory.router()).swapExactTokensForTokens(\n            tokenBal,\n            minAmount,\n            path,\n            address(this),\n            block.timestamp\n        );\n        emit swapped(path[0], path[1]);\n    }\n\n    /** \n    * @dev only called in case of emergency, allows owner to move fees out of fee manager\n    * @param asset the address of the asset to move out of fee manager\n    **/\n    function adminWithdraw(address asset) external onlyOwner{\n        //emit an event letting everyone know this was used\n        OZ_IERC20 token = OZ_IERC20(asset);\n        token.transfer(msg.sender, token.balanceOf(address(this)));\n        emit AdminWithdrawCalled(asset);\n    }\n}"
    },
    "contracts/interfaces/OZ_IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//THIS FILE WAS ORIGINALLY solidity v8!!!!!!\npragma solidity >=0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface OZ_IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/uniswapv2/interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n\ninterface IPriceOracle {\n    /**\n     * Assume claimFee uses msg.sender, and returns the amount of WETH sent to the caller\n     */\n\n    struct oracle {\n        uint[2] price0Cumulative;\n        uint[2] price1Cumulative;\n        uint32[2] timeStamp;\n        uint8 index; // 0 or 1\n    }\n\n    function getPrice(address pairAddress) external returns (uint price0Average, uint price1Average, uint timeTillValid);\n\n    function calculateMinAmount(address from, uint256 slippage, uint256 amount, address pairAddress) external returns (uint minAmount, uint timeTillValid);\n\n    function getOracleTime(address pairAddress) external view returns(uint currentTimestamp, uint otherTimestamp);\n\n    function priceValidStart() external view returns(uint);\n    function priceValidEnd() external view returns(uint);\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeToSetter() external view returns (address);\n    function migrator() external view returns (address);\n    function weth() external view returns (address);\n    function wbtc() external view returns (address);\n    function gfi() external view returns (address);\n    function earningsManager() external view returns (address);\n    function feeManager() external view returns (address);\n    function dustPan() external view returns (address);\n    function governor() external view returns (address);\n    function priceOracle() external view returns (address);\n    function pathOracle() external view returns (address);\n    function router() external view returns (address);\n    function paused() external view returns (bool);\n    function slippage() external view returns (uint);\n\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeToSetter(address) external;\n    function setMigrator(address) external;\n}\n"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
    },
    "contracts/uniswapv2/interfaces/iGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n\ninterface iGovernance {\n    /**\n     * Assume claimFee uses msg.sender, and returns the amount of WETH sent to the caller\n     */\n    function delegateFee(address reciever) external returns (uint256);\n\n    function depositFee(uint256 amountWETH, uint256 amountWBTC) external;\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "contracts/uniswapv2/EarningsManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/OZ_IERC20.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\nimport \"./interfaces/IUniswapV2ERC20.sol\";\nimport \"./interfaces/IPathOracle.sol\";\nimport \"./interfaces/IPriceOracle.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n//Add events so that The graph can track earnings going into the pool\n//TODO look at swap funciton in pair to see how they added scope for some variables in order to avoid stack to deep errors\ncontract EarningsManager is Ownable {\n    address public factory;\n    IUniswapV2Factory Factory;\n    address[] public swapPairs;\n    mapping(address => uint256) public swapIndex;\n    mapping(address => bool) public whitelist;\n\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"Gravity Finance: FORBIDDEN\");\n        _;\n    }\n\n    modifier onlyWhitelist() {\n        require(whitelist[msg.sender], \"Caller is not in whitelist!\");\n        _;\n    }\n\n    constructor(address _factory) {\n        swapPairs.push(address(0));\n        factory = _factory;\n        Factory = IUniswapV2Factory(factory);\n    }\n\n    function addSwapPair(address pairAddress) external onlyFactory {\n        require(swapIndex[pairAddress] == 0, \"Already have pair catalouged\");\n        swapPairs.push(pairAddress);\n        swapIndex[pairAddress] = swapPairs.length;\n    }\n\n    function adjustWhitelist(address _address, bool _bool) external onlyOwner {\n        whitelist[_address] = _bool;\n    }\n\n    function validTimeWindow(address pairAddress) public returns (uint valid, uint expires){\n        IPriceOracle PriceOracle = IPriceOracle(Factory.priceOracle());\n        //Assume there are only two swaps to get to the pool assets\n        // swap wETH to GFI, and swap 1/2 GFI to Other\n\n        //Two pair addresses to worry about is this one pairAddress, and the weth/gfi pair\n        \n        //Call get price to update prices on both pairs\n        PriceOracle.getPrice(pairAddress);\n        address firstAddress = Factory.getPair(Factory.weth(), Factory.gfi());\n        PriceOracle.getPrice(firstAddress);\n\n        //*****CHECK IF WE NEED TO LOOK AT ALTs\n        (uint pairACurrentTime, uint pairAOtherTime) = PriceOracle.getOracleTime(firstAddress);\n        (uint pairBCurrentTime, uint pairBOtherTime) = PriceOracle.getOracleTime(pairAddress);\n        \n        uint pairATimeTillExpire = pairACurrentTime + PriceOracle.priceValidEnd();\n        uint pairATimeTillValid = pairACurrentTime + PriceOracle.priceValidStart();\n        uint pairBTimeTillExpire = pairBCurrentTime + PriceOracle.priceValidEnd();\n        uint pairBTimeTillValid = pairBCurrentTime + PriceOracle.priceValidStart();\n        //Check if weth/gfi price time till valid is greater than pairAddress time till expires\n        if ( pairATimeTillValid > pairBTimeTillExpire) {\n            //Check if pairBs other time till valid is less than pairAs current time till expire\n            if (pairBOtherTime + PriceOracle.priceValidStart() < pairATimeTillExpire){\n                //If this is true, then we want to use pairBs other saved timestamp\n                pairBTimeTillExpire = pairBOtherTime + PriceOracle.priceValidEnd();\n                pairBTimeTillValid = pairBOtherTime + PriceOracle.priceValidStart();\n            }\n            //potentially add an else statment, not sure if you would ever make it here though\n        }\n        // Check if pairAddress price time till valid is greater than weth/gfi time till expires\n        else if ( pairBTimeTillValid > pairATimeTillExpire){\n            //Check if pairAs other time till valid is less than pairBs current time till expire\n            if (pairAOtherTime + PriceOracle.priceValidStart() < pairBTimeTillExpire){\n                //If this is true, then we want to use pairAs other saved timestamp\n                pairATimeTillExpire = pairAOtherTime + PriceOracle.priceValidEnd();\n                pairATimeTillValid = pairAOtherTime + PriceOracle.priceValidStart();\n            }\n            //potentially add an else statment, not sure if you would ever make it here though\n        }\n        //Now set the min time till valid, and max time till expire\n        if (pairATimeTillValid > pairBTimeTillValid){\n            valid = pairATimeTillValid;\n        }\n        else {\n            valid = pairBTimeTillValid;\n        }\n        if (pairATimeTillExpire < pairBTimeTillExpire){\n            expires = pairATimeTillExpire;\n        }\n        else {\n            expires = pairBTimeTillExpire;\n        }\n    }\n\n    /**\n    * @dev Will revert if prices are not valid, validTimeWindow() should be called before calling any functions that use price oracles to get min amounts\n    * known inefficiency if target pair is wETH/GFI, it will trade all the wETH for GFI, then swap half the GFI back into wETH\n    **/\n    function oracleProcessEarnings(address pairAddress) external onlyWhitelist {\n        address token0 = IUniswapV2Pair(pairAddress).token0();\n        address token1 = IUniswapV2Pair(pairAddress).token1();\n        uint256 minAmount;\n        uint256 timeTillValid;\n        uint256 slippage = Factory.slippage();\n        address[] memory path = new address[](2);\n        uint256 earnings = IUniswapV2Pair(pairAddress).handleEarnings(); //Delegates Earnings to a holding contract, and holding approves earnings manager to spend earnings\n        require(\n            OZ_IERC20(Factory.weth()).transferFrom(\n                IUniswapV2Pair(pairAddress).HOLDING_ADDRESS(),\n                address(this),\n                earnings\n            ),\n            \"Failed to transfer wETH from holding to EM\"\n        );\n        uint256[] memory amounts = new uint256[](2);\n        //First swap wETH into GFI\n        address firstPairAddress =\n            Factory.getPair(Factory.weth(), Factory.gfi());\n        (minAmount, timeTillValid) = IPriceOracle(Factory.priceOracle())\n            .calculateMinAmount(\n            Factory.weth(),\n            slippage,\n            earnings,\n            firstPairAddress\n        );\n        require(timeTillValid == 0, \"Price(s) not valid Call validTimeWindow()\");\n        path[0] = Factory.weth();\n        path[1] = Factory.gfi();\n        OZ_IERC20(Factory.weth()).approve(Factory.router(), earnings);\n        amounts = IUniswapV2Router02(Factory.router()).swapExactTokensForTokens(\n            earnings,\n            minAmount,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        //Swap 1/2 GFI into other asset\n        (minAmount, timeTillValid) = IPriceOracle(Factory.priceOracle())\n            .calculateMinAmount(Factory.gfi(), slippage, (amounts[1] / 2), pairAddress);\n        require(timeTillValid == 0, \"Price(s) not valid Call validTimeWindow()\");\n        path[0] = Factory.gfi();\n        if (token0 == Factory.gfi()) {\n            path[1] = token1;\n        } else {\n            path[1] = token0;\n        }\n        //amounts[1] = amounts[1] * 9995 / 10000;\n        OZ_IERC20(Factory.gfi()).approve(Factory.router(), (amounts[1] / 2));\n        amounts = IUniswapV2Router02(Factory.router()).swapExactTokensForTokens(\n            (amounts[1] / 2),\n            minAmount,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        //amounts[1] = amounts[1] * 9995 / 10000;\n        if(amounts[0] > OZ_IERC20(path[0]).balanceOf(address(this))){\n            amounts[0] = OZ_IERC20(path[0]).balanceOf(address(this));\n        }\n        if(amounts[1] > OZ_IERC20(path[1]).balanceOf(address(this))){\n            amounts[1] = OZ_IERC20(path[1]).balanceOf(address(this));\n        }\n        uint256 token0Var = (slippage * amounts[0]) / 100;\n        uint256 token1Var = (slippage * amounts[1]) / 100;\n        OZ_IERC20(path[0]).approve(Factory.router(), amounts[0]);\n        OZ_IERC20(path[1]).approve(Factory.router(), amounts[1]);\n        (token0Var, token1Var,) = IUniswapV2Router02(Factory.router()).addLiquidity(//reuse tokenVars to avoid stack to deep errors\n            path[0],\n            path[1],\n            amounts[0],\n            amounts[1],\n            token0Var,\n            token1Var,\n            address(this),\n            block.timestamp\n        );\n        \n        IUniswapV2ERC20 LPtoken = IUniswapV2ERC20(pairAddress);\n        require(\n            LPtoken.burn(LPtoken.balanceOf(address(this))),\n            \"Failed to burn LP tokens\"\n        );\n        if((amounts[0] - token0Var) > 0){OZ_IERC20(path[0]).transfer(Factory.dustPan(), (amounts[0] - token0Var));}\n        if((amounts[1] - token1Var) > 0){OZ_IERC20(path[1]).transfer(Factory.dustPan(), (amounts[1] - token1Var));}\n        \n    }\n\n\n    //Need to add same modifiations to this one that I added to the oracle one\n    function manualProcessEarnings(address pairAddress, uint[2] memory minAmounts) external onlyWhitelist{\n        uint256 tokenBal;\n        uint256 slippage = Factory.slippage();\n        address[] memory path = new address[](2);\n        uint256 earnings = IUniswapV2Pair(pairAddress).handleEarnings(); //Delegates Earnings to a holding contract, and holding approves earnings manager to spend earnings\n        require(\n            OZ_IERC20(Factory.weth()).transferFrom(\n                IUniswapV2Pair(pairAddress).HOLDING_ADDRESS(),\n                address(this),\n                earnings\n            ),\n            \"Failed to transfer wETH from holding to EM\"\n        );\n\n        //So don't even need to call checkPrice here, this will fail if one of the prices isn't valid, so should make a seperate function that makes sure\n        uint256[] memory amounts = new uint256[](2);\n        //First swap wETH into GFI\n        path[0] = Factory.weth();\n        path[1] = Factory.gfi();\n        OZ_IERC20(Factory.weth()).approve(Factory.router(), earnings);\n        amounts = IUniswapV2Router02(Factory.router()).swapExactTokensForTokens(\n            earnings,\n            minAmounts[0],\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        //Swap 1/2 GFI into other asset\n        tokenBal = amounts[1] / 2;\n        path[0] = Factory.gfi();\n        if (IUniswapV2Pair(pairAddress).token0() == Factory.gfi()) {\n            path[1] = IUniswapV2Pair(pairAddress).token1();\n        } else {\n            path[1] = IUniswapV2Pair(pairAddress).token0();\n        }\n        OZ_IERC20(Factory.gfi()).approve(Factory.router(), (amounts[1] / 2));\n        amounts = IUniswapV2Router02(Factory.router()).swapExactTokensForTokens(\n            tokenBal,\n            minAmounts[1],\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        OZ_IERC20 Token0 = OZ_IERC20(path[0]);\n        OZ_IERC20 Token1 = OZ_IERC20(path[1]);\n\n        uint256 minToken0 = (slippage * amounts[0]) / 100;\n        uint256 minToken1 = (slippage * amounts[1]) / 100;\n        Token0.approve(Factory.router(), amounts[0]);\n        Token1.approve(Factory.router(), amounts[1]);\n\n        (uint amountA, uint amountB,) = IUniswapV2Router02(Factory.router()).addLiquidity(\n            path[0],\n            path[1],\n            amounts[0],\n            amounts[1],\n            minToken0,\n            minToken1,\n            address(this),\n            block.timestamp\n        );\n\n        IUniswapV2ERC20 LPtoken = IUniswapV2ERC20(pairAddress);\n        require(\n            LPtoken.burn(LPtoken.balanceOf(address(this))),\n            \"Failed to burn LP tokens\"\n        );\n        //Send remaining dust to dust pan\n        Token0.transfer(Factory.dustPan(), (amounts[0] - amountA));\n        Token1.transfer(Factory.dustPan(), (amounts[1] - amountB));\n    }\n\n    /**\n    * @dev should rarely be used, intended use is to collect dust and redistribute it to appropriate swap pools\n    * Needed bc the price oracle earnings method has stack too deep errors when adding in transfer to Dust pan\n    **/\n    function adminWithdraw(address asset) external onlyOwner{\n        //emit an event letting everyone know this was used\n        OZ_IERC20 token = OZ_IERC20(asset);\n        token.transfer(msg.sender, token.balanceOf(address(this)));\n    }\n}"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function HOLDING_ADDRESS() external view returns (address);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n\n    function handleEarnings() external returns(uint amount);\n}"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function burn(uint value) external returns(bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}"
    },
    "contracts/VestingV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {iGovernance} from \"./interfaces/iGovernance.sol\";\n\ncontract VestingV2 is Ownable {\n    mapping(address => uint256) public GFIbalance;\n    mapping(address => uint256) public withdrawableFee;\n    uint256 callersShare = 100; //Caller of update fee get 1/100 of the collected fee\n    address[] public users;\n    uint256 public userCount;\n    uint256 public totalBalance;\n    uint256 public lastFeeUpdate; // Timestamp for when updateWithdrawableFee() was last called\n    uint256[10] public subVestingPeriodTimeStamp; //Time stamps for when coins will become available\n    mapping(address => bool[10]) public subVestingPeriodClaimed; //Bool indicating whether the user already claimed that periods funds\n    mapping(address => uint) public periodAmount;\n    IERC20 GFI;\n    IERC20 WETH;\n    iGovernance Governor;\n    address public GOVERANCE_ADDRESS;\n    uint256 public LockStart;\n    uint256 public LockEnd;\n    bool public stopFeeCollection;\n\n    constructor(\n        address GFI_ADDRESS,\n        address WETH_ADDRESS,\n        address _GOVERNANCE_ADDRESS,\n        uint256 startTimeStamp,\n        uint256 subPeriodTime\n    ) {\n        GFI = IERC20(GFI_ADDRESS);\n        WETH = IERC20(WETH_ADDRESS);\n        GOVERANCE_ADDRESS = _GOVERNANCE_ADDRESS;\n        Governor = iGovernance(GOVERANCE_ADDRESS);\n        LockStart = startTimeStamp;\n        LockEnd = LockStart + (subPeriodTime * 10); //10 months from start\n        uint time = LockStart + subPeriodTime;\n        for ( uint i=0; i < 10; i++){\n            subVestingPeriodTimeStamp[i] = time;\n            time = time + subPeriodTime;\n        }\n    }\n\n    function setGovenorAddress(address _address) external onlyOwner {\n        GOVERANCE_ADDRESS = _address;\n        Governor = iGovernance(GOVERANCE_ADDRESS);\n    }\n\n    function setFeeCollectionBool(bool _bool) external onlyOwner {\n        stopFeeCollection = _bool;\n    }\n\n    function getLastFeeUpdate() external view returns (uint256) {\n        return lastFeeUpdate;\n    }\n\n    function setCallersShare(uint256 _share) external onlyOwner{\n        callersShare = _share;\n    }\n\n    /** @dev Allows owner to add new allowances for users\n     * Address must not have an existing GFIbalance\n     */\n    function addUser(address _address, uint256 bal) external onlyOwner {\n        require(GFIbalance[_address] == 0, \"User is already in the contract!\");\n        require(\n            GFI.transferFrom(msg.sender, address(this), bal),\n            \"GFI transferFrom failed!\"\n        );\n        GFIbalance[_address] = bal;\n        users.push(_address);\n        userCount++;\n        totalBalance = totalBalance + bal;\n        periodAmount[_address] = bal / 100;\n        periodAmount[_address] = periodAmount[_address] * 10; // Zero out the last decimal\n    }\n\n    function updateWithdrawableFee() external{\n        require(stopFeeCollection, \"Fee distribution has been turned off!\");\n        uint256 collectedFee = Governor.claimFee();\n        uint256 callersFee = collectedFee / callersShare;\n        collectedFee = collectedFee - callersFee;\n        uint256 userShare;\n        for (uint256 i = 0; i < userCount; i++) {\n            userShare = (collectedFee * GFIbalance[users[i]]) / totalBalance;\n            //Remove last digit of userShare\n            userShare = userShare / 10;\n            userShare = userShare * 10;\n            withdrawableFee[users[i]] = withdrawableFee[users[i]] + userShare;\n        }\n        lastFeeUpdate = block.timestamp;\n        require(\n            WETH.transfer(msg.sender, callersFee),\n            \"Failed to transfer callers fee to caller!\"\n        );\n    }\n\n    function collectFee() external {\n        require(stopFeeCollection, \"Fee distribution has been turned off!\");\n        require(withdrawableFee[msg.sender] > 0, \"Caller has no fee to claim!\");\n        uint256 tmpBal = withdrawableFee[msg.sender];\n        withdrawableFee[msg.sender] = 0;\n        require(WETH.transfer(msg.sender, tmpBal));\n    }\n\n    function claimGFI() external {\n        require(GFIbalance[msg.sender] > 0, \"Caller has no GFI to claim!\");\n        //If GFI is fully vested, then just send remaining balance to user\n        if ( block.timestamp > LockEnd){\n        uint256 tmpBal = GFIbalance[msg.sender];\n        GFIbalance[msg.sender] = 0;\n        totalBalance = totalBalance - tmpBal;\n        require(\n            GFI.transfer(msg.sender, tmpBal),\n            \"Failed to transfer GFI to caller!\"\n        );\n        }\n        else {\n            uint i;\n            while(block.timestamp > subVestingPeriodTimeStamp[i]){\n                if(!subVestingPeriodClaimed[msg.sender][i]){\n                    subVestingPeriodClaimed[msg.sender][i] = true;\n                    GFIbalance[msg.sender] = GFIbalance[msg.sender] - periodAmount[msg.sender];\n                    totalBalance = totalBalance - periodAmount[msg.sender];\n                    require(GFI.transfer(msg.sender, periodAmount[msg.sender]));\n                }\n                i++;\n            }\n        }\n    }\n\n    function withdrawAll() external onlyOwner {\n        require(block.timestamp > (LockEnd + 2592000), \"Locking Period is not over yet!\"); // If users have not claimed GFI 1 month after lock is done, Owner can claim remaining GFI and WETH in contract\n        require(\n            WETH.transfer(\n                msg.sender,\n                WETH.balanceOf(address(this))\n            ),\n            \"Failed to transfer WETH to Owner!\"\n        );\n        require(\n            GFI.transfer(\n                msg.sender,\n                GFI.balanceOf(address(this))\n            ),\n            \"Failed to transfer leftover GFI to Owner!\"\n        );\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/iGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface iGovernance {\n    /**\n     * Assume claimFee uses msg.sender, and returns the amount of WETH sent to the caller\n     */\n    function delegateFee(address reciever) external returns (uint256);\n\n    function claimFee() external returns (uint256);\n}"
    },
    "contracts/Locking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Locking is Ownable {\n    mapping(address => uint256) public GFIbalance;\n    mapping(address => uint256) public withdrawableFee;\n    address[] public users;\n    uint256 public userCount;\n    uint256 public totalBalance;\n    uint256 public lastFeeUpdate; // Timestamp for when updateWithdrawableFee() was last called\n    IERC20 GFI;\n    IERC20 WETH;\n    iGovernance Governor;\n    address public GOVERANCE_ADDRESS;\n    uint256 public LockStart;\n    uint256 public LockEnd;\n    bool public stopFeeCollection;\n\n    constructor(\n        address GFI_ADDRESS,\n        address WETH_ADDRESS,\n        address _GOVERNANCE_ADDRESS\n    ) {\n        GFI = IERC20(GFI_ADDRESS);\n        WETH = IERC20(WETH_ADDRESS);\n        GOVERANCE_ADDRESS = _GOVERNANCE_ADDRESS;\n        Governor = iGovernance(GOVERANCE_ADDRESS);\n        LockStart = block.timestamp;\n        LockEnd = LockStart + 31536000; //One year from contract deployment\n    }\n\n    function setGovenorAddress(address _address) external onlyOwner {\n        GOVERANCE_ADDRESS = _address;\n        Governor = iGovernance(GOVERANCE_ADDRESS);\n    }\n\n    function setFeeCollectionBool(bool _bool) external onlyOwner {\n        stopFeeCollection = _bool;\n    }\n\n    function getLastFeeUpdate() external view returns (uint256) {\n        return lastFeeUpdate;\n    }\n\n    /** @dev Allows owner to add new allowances for users\n     * Address must not have an existing GFIbalance\n     */\n    function addUser(address _address, uint256 bal) external onlyOwner {\n        require(GFIbalance[_address] == 0, \"User is already in the contract!\");\n        require(\n            GFI.transferFrom(msg.sender, address(this), bal),\n            \"GFI transferFrom failed!\"\n        );\n        GFIbalance[_address] = bal;\n        users.push(_address);\n        userCount++;\n        totalBalance = totalBalance + bal;\n    }\n\n    function updateWithdrawableFee() external {\n        require(stopFeeCollection, \"Fee distribution has been turned off!\");\n        uint256 collectedFee = Governor.claimFee();\n        uint256 callersFee = collectedFee / 100;\n        collectedFee = collectedFee - callersFee;\n        uint256 userShare;\n        for (uint256 i = 0; i < userCount; i++) {\n            userShare = (collectedFee * GFIbalance[users[i]]) / totalBalance;\n            //Remove last digit of userShare\n            userShare = userShare / 10;\n            userShare = userShare * 10;\n            withdrawableFee[users[i]] = withdrawableFee[users[i]] + userShare;\n        }\n        lastFeeUpdate = block.timestamp;\n        require(\n            WETH.transfer(msg.sender, callersFee),\n            \"Failed to transfer callers fee to caller!\"\n        );\n    }\n\n    function collectFee() external {\n        require(stopFeeCollection, \"Fee distribution has been turned off!\");\n        require(withdrawableFee[msg.sender] > 0, \"Caller has no fee to claim!\");\n        uint256 tmpBal = withdrawableFee[msg.sender];\n        withdrawableFee[msg.sender] = 0;\n        require(WETH.transfer(msg.sender, tmpBal));\n    }\n\n    function claimGFI() external {\n        require(GFIbalance[msg.sender] > 0, \"Caller has no GFI to claim!\");\n        require(block.timestamp > LockEnd, \"GFI tokens are not fully vested!\");\n        uint256 tmpBal = GFIbalance[msg.sender];\n        GFIbalance[msg.sender] = 0;\n        require(\n            GFI.transfer(msg.sender, tmpBal),\n            \"Failed to transfer GFI to caller!\"\n        );\n    }\n\n    function withdrawAll() external onlyOwner {\n        require(block.timestamp > (LockEnd + 2592000), \"Locking Period is not over yet!\"); // If users have not claimed GFI 1 month after lock is done, Owner can claim remaining GFI and WETH in contract\n        require(\n            WETH.transferFrom(\n                address(this),\n                msg.sender,\n                WETH.balanceOf(address(this))\n            ),\n            \"Failed to transfer WETH to Owner!\"\n        );\n        require(\n            GFI.transferFrom(\n                address(this),\n                msg.sender,\n                GFI.balanceOf(address(this))\n            ),\n            \"Failed to transfer leftover GFI to Owner!\"\n        );\n    }\n}\n\ninterface iGovernance {\n    /**\n     * Assume claimFee uses msg.sender, and returns the amount of WETH sent to the caller\n     */\n    function claimFee() external returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/mockWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockWETH is ERC20 {\n    constructor() ERC20(\"Mock wETH\", \"MwETH\"){\n        _mint(msg.sender, 100000 * (10 ** 25));\n    }\n}"
    },
    "contracts/mockWBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockWBTC is ERC20 {\n    constructor() ERC20(\"Mock wBTC\", \"MwBTC\"){\n        _mint(msg.sender, 100000 * (10 ** 25));\n    }\n}"
    },
    "contracts/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockToken is ERC20 {\n    constructor(address addr1, address addr2, address addr3, address addr4) ERC20(\"Mock Token\", \"MOCK\"){\n        _mint(addr1, 100000 * (10 ** 18));\n        _mint(addr2, 100000 * (10 ** 18));\n        _mint(addr3, 100000 * (10 ** 18));\n        _mint(addr4, 100000 * (10 ** 18));\n    }\n}"
    },
    "contracts/GravityToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract GravityToken is ERC20, Ownable {\n    address public GOVERNANCE_ADDRESS;\n    iGovernance private governor;\n    bool public applyGovernanceForwarding;\n\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {\n        _mint(msg.sender, 12 * (10**26));\n    }\n\n    function setGovernanceAddress(address _address) external onlyOwner {\n        GOVERNANCE_ADDRESS = _address;\n        governor = iGovernance(GOVERNANCE_ADDRESS);\n    }\n\n    function changeGovernanceForwarding(bool _bool) external onlyOwner {\n        applyGovernanceForwarding = _bool;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        if (applyGovernanceForwarding) {\n            require(governor.govAuthTransfer(msg.sender, recipient, amount), \"Governor transfer failed!\");\n        }\n\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        if (applyGovernanceForwarding) {\n            require(governor.govAuthTransferFrom(msg.sender, sender, recipient, amount), \"Governor transferFrom failed!\");\n        }\n\n        _transfer(sender, recipient, amount);\n        uint256 currentAllowance = allowance(sender, _msgSender()); //Had to change this because error thrown with _allowances\n        //uint256 currentAllowance = _allowances[sender][_msgSender()]; //Original OpenZeppelin Line\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        _approve(sender, _msgSender(), currentAllowance - amount);\n        return true;\n    }\n\n    function burn(uint256 _amount) external returns (bool) {\n        _burn(msg.sender, _amount);\n        return true;\n    }\n}\n\ninterface iGovernance {\n    function govAuthTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool); // calls governanceTransfer after fee ledger update\n\n    function govAuthTransferFrom(\n        address original_sender,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool); // calls governanceTransferFrom after fee ledger update\n}"
    },
    "contracts/IOUToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract IOUToken is ERC20, Ownable {\n    \n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\n    \n    function mintIOU( address _address, uint _amount) external onlyOwner{\n        _mint(_address, _amount);\n    }\n    \n    function burnIOU(address _address, uint _amount) external onlyOwner {\n        _burn(_address, _amount);\n    }\n}"
    },
    "contracts/GravityIDO.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IOUToken} from \"./IOUToken.sol\";\n\ncontract GravityIDO is Ownable {\n    IERC20 private WETH;\n    IERC20 private GFI;\n    IOUToken private IOU; //Token used to show WETH contribution in IDO sale\n    address public WETH_ADDRESS;\n    address public GFI_ADDRESS;\n    address public constant TREASURY_ADDRESS =\n        0xE471f43De327bF352b5E922FeA92eF6D026B4Af0;\n    address public constant PROMO_ADDRESS =\n        0x8c7887BA91b359BC574525F05Cc403F51858c2E4;\n    uint256 public totalWETHCollected; //How much WETH was collected in the IDO\n    uint256 public constant priceInWEth = 25 * 10**12;\n    uint256 public constant maxAllocation = 5 * 10**17; // 20,000 GFI\n    uint256 public GFIforSale; //How much GFI is for sale\n    uint256 public WETHifSoldOut; //If the sale is sold out how much WETH would the contract get\n    uint256 public saleStartTime = 1621404000;\n    uint256 public saleEndTime = 1621490400;\n    uint256 public constant timeToClaim = 5184000; //Approximately 2 months after IDO sale\n    mapping(address => uint256) public contributedBal;\n    bool public ownerShareWithdrawn;\n\n    event BuyStake(address buyer, uint256 totalStake); //Emits user address, and their TOTAL stake\n    event ClaimStake(address claimer, uint256 GFIclaimed, uint256 WETHreturned); // Emits user address, and how much GFI, WETH they recieved\n    event WETHUpdate(uint256 newTotal); //Emits new total of WETH in IDO contract\n\n    constructor(\n        address _WETH_ADDRESS,\n        address _GFI_ADDRESS,\n        uint256 _amountForSale,\n        bool _startNow\n    ) {\n        WETH_ADDRESS = _WETH_ADDRESS;\n        GFI_ADDRESS = _GFI_ADDRESS;\n        WETH = IERC20(WETH_ADDRESS);\n        GFI = IERC20(GFI_ADDRESS);\n        IOU = new IOUToken(\"GFI_IDO_IOU\", \"GFI_IDO\");\n        if (_amountForSale == 0) {\n            // Use default 40,000,000\n            GFIforSale = 4 * 10**25;\n        } else {\n            GFIforSale = _amountForSale;\n        }\n        WETHifSoldOut = (GFIforSale * priceInWEth) / (10**18);\n\n        if (_startNow) {\n            saleStartTime = block.timestamp + 300; // Start it 5 min after contract creation\n            saleEndTime = saleStartTime + 86400;\n        }\n    }\n\n    function getIOUAddress() external view returns (address) {\n        return address(IOU);\n    }\n\n    function setWETH_ADDRESS(address _address) external onlyOwner {\n        require(\n            block.timestamp <= saleStartTime,\n            \"IDO has started cannot change address!\"\n        );\n        WETH_ADDRESS = _address;\n        WETH = IERC20(WETH_ADDRESS);\n    }\n\n    function setGFI_ADDRESS(address _address) external onlyOwner {\n        require(\n            block.timestamp <= saleStartTime,\n            \"IDO has started cannot change address!\"\n        );\n        GFI_ADDRESS = _address;\n        GFI = IERC20(GFI);\n    }\n\n    function getWETH_ADDRESS() external view returns (address) {\n        return WETH_ADDRESS;\n    }\n\n    function getGFI_ADDRESS() external view returns (address) {\n        return GFI_ADDRESS;\n    }\n\n    function getTotalWETHCollected() external view returns (uint256) {\n        return totalWETHCollected;\n    }\n\n    function buyStake(uint256 _amount) external {\n        require(block.timestamp >= saleStartTime, \"IDO has not started!\");\n        require(block.timestamp <= saleEndTime, \"IDO sale is finished!\");\n        require(\n            GFI.balanceOf(address(this)) >= GFIforSale,\n            \"Contract does not hold enough GFI tokens to cover sale!\"\n        );\n        require(\n            (contributedBal[msg.sender] + _amount) <= maxAllocation,\n            \"Exceeds max allocation!\"\n        );\n        require(_amount > 0, \"Amount must be greater than zero!\");\n        require(\n            WETH.transferFrom(msg.sender, address(this), _amount),\n            \"WETH transferFrom Failed!\"\n        );\n        totalWETHCollected = totalWETHCollected + _amount; // Update here instead of using balanceOf in endIDO function\n        contributedBal[msg.sender] = contributedBal[msg.sender] + _amount;\n        IOU.mintIOU(msg.sender, _amount);\n        emit BuyStake(msg.sender, contributedBal[msg.sender]);\n        emit WETHUpdate(totalWETHCollected);\n    }\n\n    function claimStake() external {\n        require(block.timestamp >= saleEndTime, \"IDO sale is not over yet!\");\n        require(\n            block.timestamp >= (saleEndTime + 1800),\n            \"Please wait 30 min after IDO to claim your tokens!\"\n        );\n        uint256 userBal = IOU.balanceOf(msg.sender);\n        require(userBal > 0, \"Caller has no GFI_IDO tokens to claim!\");\n        require(\n            IOU.transferFrom(msg.sender, address(this), userBal),\n            \"Failed to transfer IOU to contract!\"\n        ); //Not sure if this is needed, could just burn the tokens form the user address\n        IOU.burnIOU(address(this), userBal);\n        uint256 GFItoUser;\n        uint256 WETHtoReturn;\n        if (totalWETHCollected > WETHifSoldOut) {\n            uint256 userPercent = ((10**18) * userBal) / totalWETHCollected;\n            GFItoUser = (userPercent * GFIforSale) / (10**18);\n            WETHtoReturn = userBal - ((GFItoUser * priceInWEth) / (10**18));\n        } else {\n            GFItoUser = ((10**18) * userBal) / priceInWEth;\n        }\n\n        //Remove the last decimal place\n        GFItoUser = GFItoUser / 10;\n        GFItoUser = GFItoUser * 10;\n        WETHtoReturn = WETHtoReturn / 10;\n        WETHtoReturn = WETHtoReturn * 10;\n        //Transfer tokens to user\n        require(\n            GFI.transfer(msg.sender, GFItoUser),\n            \"Failed to transfer GFI to claimer\"\n        );\n        if (WETHtoReturn > 0) {\n            require(\n                WETH.transfer(msg.sender, WETHtoReturn),\n                \"Failed to return extra WETH to claimer\"\n            );\n        }\n        emit ClaimStake(msg.sender, GFItoUser, WETHtoReturn);\n    }\n\n    function withdraw() external onlyOwner {\n        require(\n            !ownerShareWithdrawn,\n            \"Owner has already withdrawn their share!\"\n        );\n        require(block.timestamp >= saleEndTime, \"IDO sale is not over yet!\");\n        ownerShareWithdrawn = true;\n        if (totalWETHCollected >= WETHifSoldOut) {\n            // If all GFI are sold\n            require(\n                WETH.transfer(TREASURY_ADDRESS, WETHifSoldOut),\n                \"Failed to return WETH to Treasury wallet  \"\n            );\n        } else {\n            //Not all GFI tokens were sold.\n            require(\n                WETH.transfer(TREASURY_ADDRESS, totalWETHCollected),\n                \"Failed to return WETH to Treasury wallet\"\n            );\n            uint256 GFItoReturn =\n                ((10**18) * (WETHifSoldOut - totalWETHCollected)) / priceInWEth;\n            require(\n                GFI.transfer(PROMO_ADDRESS, GFItoReturn),\n                \"Failed to transfer GFI to Promotion wallet\"\n            );\n        }\n    }\n\n    function withdrawAll() external onlyOwner {\n        require(\n            (block.timestamp > (saleEndTime + timeToClaim)) ||\n                (IOU.totalSupply() == 0),\n            \"Owner must wait approx 2 months until they can claim remaining assets OR until all IOUs are fulfilled!\"\n        );\n        require(\n            WETH.transfer(TREASURY_ADDRESS, WETH.balanceOf(address(this))),\n            \"Failed to return WETH to Treasury wallet\"\n        );\n        require(\n            GFI.transfer(PROMO_ADDRESS, GFI.balanceOf(address(this))),\n            \"Failed to transfer GFI to Promotion wallet\"\n        );\n    }\n}\n"
    },
    "contracts/interfaces/iGravityToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface iGravityToken is IERC20 {\n\n    function setGovernanceAddress(address _address) external;\n\n    function changeGovernanceForwarding(bool _bool) external;\n\n    function burn(uint256 _amount) external returns (bool);\n}"
    },
    "contracts/Governance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {iGravityToken} from \"./interfaces/iGravityToken.sol\";\n\ncontract Governance is Initializable, OwnableUpgradeable {\n    mapping(address => uint256) public feeBalance;\n    address public tokenAddress;\n    struct FeeLedger {\n        uint256 totalFeeCollected_LastClaim;\n        uint256 totalSupply_LastClaim;\n        uint256 userBalance_LastClaim;\n    }\n    mapping(address => FeeLedger) public feeLedger;\n    uint256 totalFeeCollected;\n    iGravityToken GFI;\n    IERC20 WETH;\n    IERC20 WBTC;\n\n    modifier onlyToken() {\n        require(msg.sender == tokenAddress, \"Only the token contract can call this function\");\n        _;\n    }\n\n    function initialize(\n        address GFI_ADDRESS,\n        address WETH_ADDRESS,\n        address WBTC_ADDRESS\n    ) public initializer {\n        __Ownable_init();\n        tokenAddress = GFI_ADDRESS;\n        GFI = iGravityToken(GFI_ADDRESS);\n        WETH = IERC20(WETH_ADDRESS);\n        WBTC = IERC20(WBTC_ADDRESS);\n    }\n    /**\n    * @dev internal function called when token contract calls govAuthTransfer or govAuthTransferFrom\n    * Will update the recievers fee balance. This will not change the reward they would have got from this fee update\n    * rather it updates the fee ledger to refelct the new increased amount of GFI in their wallet\n    * @param _address the address of the address recieving GFI tokens\n    * @param amount the amount of tokens the address is recieving\n    **/\n    function _updateFeeReceiver(address _address, uint256 amount)\n        internal\n        returns (uint256)\n    {\n        uint256 supply;\n        uint256 balance;\n\n        //Pick the greatest supply and the lowest user balance\n        uint256 currentBalance = GFI.balanceOf(_address) + amount; //Add the amount they are getting transferred eventhough updateFee will use smaller pre transfer value\n        if (currentBalance > feeLedger[_address].userBalance_LastClaim) {\n            balance = feeLedger[_address].userBalance_LastClaim;\n        } else {\n            balance = currentBalance;\n        }\n\n        uint256 currentSupply = GFI.totalSupply();\n        if (currentSupply < feeLedger[_address].totalSupply_LastClaim) {\n            supply = feeLedger[_address].totalSupply_LastClaim;\n        } else {\n            supply = currentSupply;\n        }\n\n        uint256 feeAllocation =\n            ((totalFeeCollected -\n                feeLedger[_address].totalFeeCollected_LastClaim) * balance) /\n                supply;\n        feeLedger[_address].totalFeeCollected_LastClaim = totalFeeCollected;\n        feeLedger[_address].totalSupply_LastClaim = currentSupply;\n        feeLedger[_address].userBalance_LastClaim = currentBalance;\n        feeBalance[_address] = feeBalance[_address] + feeAllocation;\n        return feeAllocation;\n    }\n\n    function updateFee(address _address) public returns (uint256) {\n        require(GFI.balanceOf(_address) > 0, \"_address has no GFI\");\n        uint256 supply;\n        uint256 balance;\n\n        //Pick the greatest supply and the lowest user balance\n        uint256 currentBalance = GFI.balanceOf(_address);\n        if (currentBalance > feeLedger[_address].userBalance_LastClaim) {\n            balance = feeLedger[_address].userBalance_LastClaim;\n        } else {\n            balance = currentBalance;\n        }\n\n        uint256 currentSupply = GFI.totalSupply();\n        if (currentSupply < feeLedger[_address].totalSupply_LastClaim) {\n            supply = feeLedger[_address].totalSupply_LastClaim;\n        } else {\n            supply = currentSupply;\n        }\n\n        uint256 feeAllocation =\n            ((totalFeeCollected -\n                feeLedger[_address].totalFeeCollected_LastClaim) * balance) /\n                supply;\n        feeLedger[_address].totalFeeCollected_LastClaim = totalFeeCollected;\n        feeLedger[_address].totalSupply_LastClaim = currentSupply;\n        feeLedger[_address].userBalance_LastClaim = currentBalance;\n        feeBalance[_address] = feeBalance[_address] + feeAllocation;\n        return feeAllocation;\n    }\n\n    function claimFee() public returns (uint256) {\n        require(GFI.balanceOf(msg.sender) > 0, \"User has no GFI\");\n        uint256 supply;\n        uint256 balance;\n\n        //Pick the greatest supply and the lowest user balance\n        uint256 currentBalance = GFI.balanceOf(msg.sender);\n        if (currentBalance > feeLedger[msg.sender].userBalance_LastClaim) {\n            balance = feeLedger[msg.sender].userBalance_LastClaim;\n        } else {\n            balance = currentBalance;\n        }\n\n        uint256 currentSupply = GFI.totalSupply();\n        if (currentSupply < feeLedger[msg.sender].totalSupply_LastClaim) {\n            supply = feeLedger[msg.sender].totalSupply_LastClaim;\n        } else {\n            supply = currentSupply;\n        }\n\n        uint256 feeAllocation =\n            ((totalFeeCollected -\n                feeLedger[msg.sender].totalFeeCollected_LastClaim) * balance) /\n                supply;\n        feeLedger[msg.sender].totalFeeCollected_LastClaim = totalFeeCollected;\n        feeLedger[msg.sender].totalSupply_LastClaim = currentSupply;\n        feeLedger[msg.sender].userBalance_LastClaim = currentBalance;\n        //Add any extra fees they need to collect\n        feeAllocation = feeAllocation + feeBalance[msg.sender];\n        feeBalance[msg.sender] = 0;\n        require(WETH.transfer(msg.sender, feeAllocation),\"Failed to delegate wETH to caller\");\n        return feeAllocation;\n    }\n\n    function delegateFee(address reciever) public returns (uint256) {\n        require(GFI.balanceOf(msg.sender) > 0, \"User has no GFI\");\n        uint256 supply;\n        uint256 balance;\n\n        //Pick the greatest supply and the lowest user balance\n        uint256 currentBalance = GFI.balanceOf(msg.sender);\n        if (currentBalance > feeLedger[msg.sender].userBalance_LastClaim) {\n            balance = feeLedger[msg.sender].userBalance_LastClaim;\n        } else {\n            balance = currentBalance;\n        }\n\n        uint256 currentSupply = GFI.totalSupply();\n        if (currentSupply < feeLedger[msg.sender].totalSupply_LastClaim) {\n            supply = feeLedger[msg.sender].totalSupply_LastClaim;\n        } else {\n            supply = currentSupply;\n        }\n\n        uint256 feeAllocation =\n            ((totalFeeCollected -\n                feeLedger[msg.sender].totalFeeCollected_LastClaim) * balance) /\n                supply;\n        feeLedger[msg.sender].totalFeeCollected_LastClaim = totalFeeCollected;\n        feeLedger[msg.sender].totalSupply_LastClaim = currentSupply;\n        feeLedger[msg.sender].userBalance_LastClaim = currentBalance;\n        //Add any extra fees they need to collect\n        feeAllocation = feeAllocation + feeBalance[msg.sender];\n        feeBalance[msg.sender] = 0;\n        require(WETH.transfer(reciever, feeAllocation), \"Failed to delegate wETH to reciever\");\n        return feeAllocation;\n    }\n\n    function withdrawFee() external {\n        uint256 feeAllocation = feeBalance[msg.sender];\n        feeBalance[msg.sender] = 0;\n        require(WETH.transfer(msg.sender, feeAllocation), \"Failed to delegate wETH to caller\");\n    }\n\n    function govAuthTransfer(\n        address caller,\n        address to,\n        uint256 amount\n    ) external onlyToken returns (bool) {\n        require(GFI.balanceOf(caller) >= amount, \"GOVERNANCE: Amount exceedes balance!\");\n        updateFee(caller);\n        _updateFeeReceiver(to, amount);\n        return true;\n    }\n\n    function govAuthTransferFrom(\n        address caller,\n        address from,\n        address to,\n        uint256 amount\n    ) external onlyToken returns (bool) {\n        require(GFI.allowance(from, caller) >= amount, \"GOVERNANCE: Amount exceedes allowance!\");\n        require(GFI.balanceOf(from) >= amount, \"GOVERNANCE: Amount exceedes balance!\");\n        updateFee(from);\n        _updateFeeReceiver(to, amount);\n        return true;\n    }\n\n    function depositFee(uint256 amountWETH, uint256 amountWBTC) external {\n        require(\n            WETH.transferFrom(msg.sender, address(this), amountWETH),\n            \"Failed to transfer wETH into contract!\"\n        );\n        require(\n            WBTC.transferFrom(msg.sender, address(this), amountWBTC),\n            \"Failed to transfer wBTC into contract!\"\n        );\n        totalFeeCollected = totalFeeCollected + amountWETH;\n    }\n\n    function claimBTC(uint256 amount) external {\n        require(\n            amount > 10**18,\n            \"Amount too small, must be greater than 1 GFI token!\"\n        );\n        require(\n            GFI.transferFrom(msg.sender, address(this), amount),\n            \"Failed to transfer GFI to governance contract!\"\n        );\n        require(GFI.burn(amount), \"Failed to burn GFI!\");\n        uint256 WBTCowed =\n            (amount * WBTC.balanceOf(address(this))) / GFI.totalSupply();\n        require(\n            WBTC.transfer(msg.sender, WBTCowed),\n            \"Failed to transfer wBTC to caller!\"\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/FarmTimeLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IFarm.sol\";\n\ncontract FarmTimeLock is Ownable {\n\n    uint public lockLength;\n    uint public graceLength; //Amount of time owner has to call the function before it expires\n\n    uint public changeTimeLock_timestamp;\n    uint public changeTimeLock_lockInSec;\n    mapping(address => uint) public transferOwnershipFromLock_timestamp;\n    mapping(address => address) public transferOwnershipFromLock_newOwner;\n    mapping(address => uint) public callWithdrawRewards_timestamp;\n    mapping(address => uint) public callWithdrawRewards_amount; //The variable you want to pass into withdrawRewards function call\n    uint public withdrawERC20_timestamp;\n    address public withdrawERC20_token;\n    address public withdrawERC20_wallet;\n\n    /**\n    * @dev emitted when proposal to change lock period is made\n    * @param valid the timestamp when the proposal will become valid\n    * @param newPeriod the new lock period in seconds\n    **/\n    event lockPeriodChanged(uint valid, uint newPeriod);\n\n    /**\n    * @dev emitted when proposal to change farm owner is made\n    * @param valid the timestamp when the proposal will become valid\n    * @param farm the address of the farm\n    * @param newOwner the address of the new owner\n    **/\n    event transferOwnershipCalled(uint valid, address farm, address newOwner);\n    \n    /**\n    * @dev emitted when proposal to call withdraw rewards is made\n    * @param valid the timestamp when the proposal will become valid\n    * @param farm the address of the farm\n    * @param amount the amount of tokens to withdraw with 10**18 decimals\n    **/\n    event withdrawRewards(uint valid, address farm, uint amount);\n    \n    /**\n    * @dev emitted when proposal to withdraw ERC20 tokens from this contract is made\n    * @param token the token address of the token to withdraw\n    * @param to the address of the wallet to send the tokens to\n    **/\n    event withdraw(uint valid, address token, address to);\n\n    constructor(uint _lockLength, uint _graceLength){\n        lockLength = _lockLength; // 1 week by default\n        graceLength = _graceLength; //owner has 1 day to call the function once it is valid\n    }\n\n    /**\n    * @dev allows owner to change the lock period after the lock period is up, and set it anywhere from 1 day to 30 days\n    * @param lockInSec the new lock period time in seconds\n    **/\n    function changeTimeLock(uint lockInSec) external onlyOwner{\n        uint validStart = changeTimeLock_timestamp + lockLength;\n        uint validEnd = changeTimeLock_timestamp + lockLength + graceLength;\n\n        if (block.timestamp > validStart && block.timestamp < validEnd){//If request is now valid fulfill it\n            changeTimeLock_timestamp = 0; //reset the timestamp\n            lockLength = changeTimeLock_lockInSec;\n        }\n\n        else{ //Call is not valid so reset timestamp and capture input\n            if(block.timestamp > validEnd){//Only make a new timestamp if the current one is expired\n                require(lockInSec > 86400, \"Locking period must be greater than 1 day!\");\n                require(lockInSec < 2592000, \"Locking period can not be greater than a month!\");\n                changeTimeLock_timestamp = block.timestamp;\n                changeTimeLock_lockInSec = lockInSec;\n                emit lockPeriodChanged(validStart, lockInSec);\n            }\n        }\n    }\n\n    /**\n    * @dev allows owner to call the transferOwnership function in any farm (that has it's owner set as this address) after the time lock period is up, and before the call expires\n    * @param farm the address of the farm to call withdrawRewards on\n    * @param newOwner the address of the new owner of the farm contract\n    **/\n    function transferOwnershipFromLock(address farm, address newOwner) external onlyOwner{\n        uint validStart = transferOwnershipFromLock_timestamp[farm] + lockLength;\n        uint validEnd = transferOwnershipFromLock_timestamp[farm] + lockLength + graceLength;\n\n        if (block.timestamp > validStart && block.timestamp < validEnd){//If request is now valid fulfill it\n            transferOwnershipFromLock_timestamp[farm] = 0; //reset the timestamp\n            IFarm(farm).transferOwnership(transferOwnershipFromLock_newOwner[farm]);\n        }\n\n        else{ //Call is not valid so reset timestamp and capture input\n            if(block.timestamp > validEnd){//Only make a new timestamp if the current one is expired\n                transferOwnershipFromLock_timestamp[farm] = block.timestamp;\n                transferOwnershipFromLock_newOwner[farm] = newOwner;\n                emit transferOwnershipCalled(validStart, farm, newOwner);\n            }\n        }\n    }\n\n    /**\n    * @dev allows owner to call the withdrawRewards function in any farm (that has it's owner set as this address) after the time lock period is up, and before the call expires\n    * @param farm the address of the farm to call withdrawRewards on\n    * @param amount the amount of tokens to withdraw from the pool\n    **/\n    function callWithdrawRewards(address farm, uint amount) external onlyOwner{\n        require(IFarm(farm).owner() == address(this), \"Time lock contract does not own farm contract!\");\n        uint validStart = callWithdrawRewards_timestamp[farm] + lockLength;\n        uint validEnd = callWithdrawRewards_timestamp[farm] + lockLength + graceLength;\n\n        if (block.timestamp > validStart && block.timestamp < validEnd){//If request is now valid fulfill it\n            callWithdrawRewards_timestamp[farm] = 0; //reset the timestamp\n            IFarm(farm).withdrawRewards(callWithdrawRewards_amount[farm]);\n        }\n\n        else{ //Call is not valid so reset timestamp and capture input\n            if(block.timestamp > validEnd){//Only make a new timestamp if the current one is expired\n                callWithdrawRewards_timestamp[farm] = block.timestamp;\n                callWithdrawRewards_amount[farm] = amount;\n                emit withdrawRewards(validStart, farm, amount);\n            }\n        }\n    }\n\n    /**\n    * @dev allows owner to withdraw any ERC20 token from THIS contract, after waiting a week.\n    * note, token address, and recieving wallet address are publically visible for the week up until the call is valid\n    * @param token the address of the ERC20 token you want to withdraw from this contract\n    * @param wallet the address of the reciever of withdrawn tokens\n    **/\n    function withdrawERC20(address token, address wallet) external onlyOwner{\n        uint validStart = withdrawERC20_timestamp + lockLength;\n        uint validEnd = withdrawERC20_timestamp + lockLength + graceLength;\n\n        if (block.timestamp > validStart && block.timestamp < validEnd){//If request is now valid fulfill it\n            withdrawERC20_timestamp = 0; //reset the timestamp\n            IERC20 Token = IERC20(withdrawERC20_token);\n            Token.transfer(withdrawERC20_wallet, Token.balanceOf(address(this)));\n        }\n\n        else{ //Call is not valid so reset timestamp and capture input\n            if(block.timestamp > validEnd){//Only make a new timestamp if the current one is expired\n                withdrawERC20_timestamp = block.timestamp;\n                withdrawERC20_wallet = wallet;\n                withdrawERC20_token = token;\n                emit withdraw(validStart, token, wallet);\n            }\n        }\n    }\n}"
    },
    "contracts/interfaces/IFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\ninterface IFarm {\n    /**\n     * Assume claimFee uses msg.sender, and returns the amount of WETH sent to the caller\n     */\n    function withdrawRewards(uint256 amount) external;\n    function transferOwnership(address newOwner) external; \n    function owner() external view returns(address);\n}"
    },
    "contracts/uniswapv2/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/OZ_IERC20.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\nimport \"./libraries/UQ112x112.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PriceOracle is Ownable{\n    using UQ112x112 for uint224;\n    uint8 public constant RESOLUTION = 112;\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    struct oracle {\n        uint[2] price0Cumulative;\n        uint[2] price1Cumulative;\n        uint32[2] timeStamp;\n        uint8 index; // 0 or 1\n    }\n\n    mapping(address => oracle) public priceOracles; // Maps a pair address to a price oracle\n\n\n    uint public priceValidStart;\n    uint public priceValidEnd;\n\n    /**\n    * @dev emitted when owner calls setTimingReq\n    * @param priceValidStart how long it takes for a price to become valid from when it is logged\n    * @param priceValidEnd how long it takes for the price to expire from when it is logged\n    **/\n    event priceWindowChanged(uint priceValidStart, uint priceValidEnd);\n\n\n\n    constructor(uint _priceValidStart, uint _priceValidEnd) {\n        require(_priceValidStart >= 300, \"Price maturity must be greater than 300 seconds\");\n        require(_priceValidStart <= 3600, \"Price maturity must be less than 3600 seconds\");\n        require(_priceValidStart * 2 == _priceValidEnd, \"Price expiration must be equal to 2x price maturity\");\n        priceValidStart = _priceValidStart;\n        priceValidEnd = _priceValidEnd;\n    }\n\n    /**\n    * @dev called by owner to change the price valid window\n    * @param _priceValidStart how many seconds it takes for the price to become valid\n    * @param _priceValidEnd hwo many seconds it takes for a price to expire from when it is logged\n    **/\n    function setTimingReq(uint _priceValidStart, uint _priceValidEnd) external onlyOwner{\n        require(_priceValidStart >= 300, \"Price maturity must be greater than 300 seconds\");\n        require(_priceValidStart <= 3600, \"Price maturity must be less than 3600 seconds\");\n        require(_priceValidStart * 2 == _priceValidEnd, \"Price expiration must be equal to 2x price maturity\");\n        priceValidStart = _priceValidStart; \n        priceValidEnd = _priceValidEnd;\n        emit priceWindowChanged(priceValidStart, priceValidEnd);\n    }\n\n    /** \n    * @dev called to get the current prices for a swap pair, if not valid, then it logs the current price so that it can become valid\n    * @param pairAddress the pair address caller wants the pair prices for\n    * @return price0Average , price1Average, timeTillValid 3 uints the average price for asset 0 to asset 1 and vice versa, and the timeTillValid which is how many seconds until prices are valid\n    **/\n    function getPrice(address pairAddress) public returns (uint price0Average, uint price1Average, uint timeTillValid) {\n        uint8 index = priceOracles[pairAddress].index;\n        uint8 otherIndex;\n        uint8 tempIndex;\n        if (index == 0){\n            otherIndex = 1;\n        }\n        else {\n            otherIndex = 0;\n        }\n        //Check if current index is expired\n        if (priceOracles[pairAddress].timeStamp[index] + priceValidEnd < currentBlockTimestamp()) {\n            (\n                priceOracles[pairAddress].price0Cumulative[index],\n                priceOracles[pairAddress].price1Cumulative[index],\n                priceOracles[pairAddress].timeStamp[index]\n            ) = currentCumulativePrices(pairAddress);   \n            //Check if other index isnt expired\n            if(priceOracles[pairAddress].timeStamp[otherIndex] + priceValidEnd > currentBlockTimestamp()){\n                //If it hasn't expired, switch the indexes\n                tempIndex = index;\n                index = otherIndex;\n                otherIndex = tempIndex;\n            }\n            //Now look at the current index, and figure out how long it is until it is valid\n            require(priceOracles[pairAddress].timeStamp[index] + priceValidEnd > currentBlockTimestamp(), \"Logic error index assigned incorrectly!\");\n            if (priceOracles[pairAddress].timeStamp[index] + priceValidStart > currentBlockTimestamp()){\n                //Current prices have not matured, so wait until they do\n                timeTillValid = (priceOracles[pairAddress].timeStamp[index] + priceValidStart) - currentBlockTimestamp();\n            }\n            else{\n                timeTillValid = 0;\n            } \n        }\n        else {\n            if (priceOracles[pairAddress].timeStamp[index] + priceValidStart > currentBlockTimestamp()){\n                //Current prices have not matured, so wait until they do\n                timeTillValid = (priceOracles[pairAddress].timeStamp[index] + priceValidStart) - currentBlockTimestamp();\n            }\n            else{\n                timeTillValid = 0;\n            } \n            if(priceOracles[pairAddress].timeStamp[otherIndex] + priceValidEnd < currentBlockTimestamp() && priceOracles[pairAddress].timeStamp[index] + priceValidStart < currentBlockTimestamp()){\n                //If the other index is expired, and the current index is valid, then set other index = to current info\n                (\n                priceOracles[pairAddress].price0Cumulative[otherIndex],\n                priceOracles[pairAddress].price1Cumulative[otherIndex],\n                priceOracles[pairAddress].timeStamp[otherIndex]\n            ) = currentCumulativePrices(pairAddress);\n            }\n        }\n        if (timeTillValid == 0){//If prices are valid, set price0Average, and price1Average\n            (uint256 price0Cumulative, uint256 price1Cumulative, uint32 timeStamp) =\n            currentCumulativePrices(pairAddress);\n            uint32 timeElapsed = timeStamp - priceOracles[pairAddress].timeStamp[index];\n            price0Average = uint256((10**18 *uint224((price0Cumulative - priceOracles[pairAddress].price0Cumulative[index]) /timeElapsed)) / 2**112);\n            price1Average =  uint256((10**18 *uint224((price1Cumulative - priceOracles[pairAddress].price1Cumulative[index]) /timeElapsed)) / 2**112);\n        }\n    }\n\n    /**\n    * @dev get the current timestamp from the price oracle, as well as the alternate timestamp\n    * @param pairAddress the pair address you want to check the timestamps for\n    * @return currentTimestamp otherTimestamp, the current and the alternate timestamps\n    **/\n    function getOracleTime(address pairAddress) external view returns(uint currentTimestamp, uint otherTimestamp){\n        oracle memory tmp = priceOracles[pairAddress];\n        if (tmp.index == 0){\n            currentTimestamp = tmp.timeStamp[0];\n            otherTimestamp = tmp.timeStamp[1];\n        }\n        else {\n            currentTimestamp = tmp.timeStamp[1];\n            otherTimestamp = tmp.timeStamp[0];\n        }\n    }\n\n    /**\n    * @dev used to calculate the minimum amount to recieve from a swap\n    * @param from the token you want to swap for another token\n    * @param slippage number from 0 to 100 that represents a percent, will revert if greater than 100\n    * @param amount the amount of from tokens you want swapped into the other token\n    * @param pairAddress the pairAddress you want to use for swapping\n    * @return minAmount timeTillValid the minimum amount to expect for a trade, and the time until the price is valid. If timeTillValid is greater than 0 DO NOT USE THE minAmount variable, it will be 0\n    **/\n    function calculateMinAmount(\n        address from,\n        uint256 slippage,\n        uint256 amount,\n        address pairAddress\n    ) public returns (uint minAmount, uint timeTillValid) {\n        require(pairAddress != address(0), \"Pair does not exist!\");\n        require(slippage <= 100, \"Slippage should be a number between 0 -> 100\");\n        (,, timeTillValid) = getPrice(pairAddress);\n        if (timeTillValid == 0){\n            uint8 index = priceOracles[pairAddress].index;\n            uint256 TWAP;\n            IUniswapV2Pair Pair = IUniswapV2Pair(pairAddress);\n            (uint256 price0Cumulative, uint256 price1Cumulative, uint32 timeStamp) =\n                currentCumulativePrices(pairAddress);\n            uint32 timeElapsed = timeStamp - priceOracles[pairAddress].timeStamp[index];\n            if (Pair.token0() == from) {\n                TWAP = uint256((10**18 *uint224((price0Cumulative - priceOracles[pairAddress].price0Cumulative[index]) /timeElapsed)) / 2**112);\n                minAmount = (slippage * TWAP * amount) / 10**20; //Pair price must be within slippage req\n            } else {\n                TWAP = uint256((10**18 *uint224((price1Cumulative - priceOracles[pairAddress].price1Cumulative[index]) /timeElapsed)) / 2**112);\n                minAmount = (slippage * TWAP * amount) / 10**20; //Pair price must be within slippage req\n            }\n        }\n    }\n\n    /** \n    * @dev internal function used to make the block.timestamp into a uint32\n    **/\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2**32);\n    }\n\n    /**\n    * @dev produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    * @param pair the pair address you want the prices for\n    **/\n    function currentCumulativePrices(address pair)\n        internal\n        view\n        returns (\n            uint256 price0Cumulative,\n            uint256 price1Cumulative,\n            uint32 blockTimestamp\n        )\n    {\n        blockTimestamp = currentBlockTimestamp();\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) =\n            IUniswapV2Pair(pair).getReserves();\n        if (blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n            // addition overflow is desired\n            // counterfactual\n            price0Cumulative +=\n                uint256(UQ112x112.encode(reserve1).uqdiv(reserve0)) *\n                timeElapsed;\n            price1Cumulative +=\n                uint256(UQ112x112.encode(reserve0).uqdiv(reserve1)) *\n                timeElapsed;\n        }\n    }\n\n}"
    },
    "contracts/uniswapv2/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.12;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    },
    "contracts/uniswapv2/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}"
    },
    "contracts/uniswapv2/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IERC20Uniswap {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "contracts/uniswapv2/PathOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport './interfaces/IUniswapV2Factory.sol';\n\n/**\n* @dev OWNER SHOULD CALL alterPath(weth, wbtc) after deployment to set the final path properly\n**/\ncontract PathOracle is Ownable {\n    mapping(address => address) public pathMap;\n    address[] public favoredAssets;\n    uint public favoredLength;\n    address public factory;\n    IUniswapV2Factory Factory;\n\n    struct node{\n        address token;\n        bool notLeaf;\n    }\n    /**\n    * @dev emitted when the owner manually alters a path\n    * @param fromAsset the token address that is the input into pathMap\n    * @param toAsset the token address that is the output from pathMap\n    **/\n    event pathAltered(address fromAsset, address toAsset);\n\n    /**\n    * @dev emitted when a new pair is created, and their addresses are added to pathMap\n    * @param leaf the token address of the asset with no other addresses pointed to it(as of this event)\n    * @param branch the token address of the asset which the leaf points to\n    **/\n    event pathAppended(address leaf, address branch);\n\n    constructor(address[] memory _favored, uint _favoredLength) {\n        favoredAssets = _favored;\n        favoredLength = _favoredLength;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"Gravity Finance: FORBIDDEN\");\n        _;\n    }\n\n    /**\n    * @dev called by owner to manually change the path mapping\n    * @param fromAsset the token address used as the input for pathMap\n    * @param toAsset the token address that is the output of pathMap\n    **/\n    function alterPath(address fromAsset, address toAsset) external onlyOwner {\n        pathMap[fromAsset] = toAsset;\n        emit pathAltered(fromAsset, toAsset);\n    }\n\n    /**\n    * @dev view function used to get the output from pathMap if from is the input \n    * @param from the address you are going from\n    * @return to the address from steps you to\n    **/\n    function stepPath(address from) public view returns(address to){\n        to = pathMap[from];\n    }\n\n    /**\n    * @dev called by owner to change the factory address\n    * @param _address the new factory address\n    **/\n    function setFactory(address _address) external onlyOwner {\n        factory = _address;\n        Factory = IUniswapV2Factory(factory);\n    }\n\n    /**\n    * @dev called by newly created pairs, basically check if either of the pairs are in the favored list, or if they have a pair with a favored list asset\n    * @param token0 address of the first token in the pair\n    * @param token1 address of the second token in the pair\n    **/\n    function appendPath(address token0, address token1) external onlyFactory {\n        bool inFavored;\n        //First Check if either of the tokens are in the favored list\n        for (uint i=0; i < favoredLength; i++){\n            if (token0 == favoredAssets[i]){\n                pathMap[token1] = token0; //Swap token1 for token0\n                inFavored = true;\n                emit pathAppended(token1, token0);\n                break;\n            }\n\n            else if (token1 == favoredAssets[i]){\n                pathMap[token0] = token1; //Swap token0 for token1\n                inFavored = true;\n                emit pathAppended(token0, token1);\n                break;\n            }\n        }\n        //If neither of the tokens are in the favored list, then see if either of them have pairs with a token in the favored list\n        if (!inFavored){\n            for (uint i=0; i < favoredLength; i++){\n                if (Factory.getPair(token0, favoredAssets[i]) != address(0)){\n                    pathMap[token1] = token0; //Swap token1 for token0\n                    pathMap[token0] = favoredAssets[i];\n                    emit pathAppended(token1, token0);\n                    break;\n                }\n\n                else if (Factory.getPair(token1, favoredAssets[i]) != address(0)){\n                    pathMap[token0] = token1; //Swap token0 for token1\n                    pathMap[token1] = favoredAssets[i];\n                    emit pathAppended(token0, token1);\n                    break;\n                }\n            }\n        }\n    }\n}"
    },
    "contracts/uniswapv2/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}