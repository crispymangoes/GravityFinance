{
  "version": "3.2",
  "log": [
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "f4eddf840222d770c5d65babbacb28c04b894a958650f12e268ed6df5d9debda",
          "withoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083",
          "linkedWithoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1662",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:16"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:19"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:22"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:27"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:28"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1662": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1611",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1611": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "4e6ec9a89ef24facfcf347dd06cb648544fe6d0ea6e3f8a629c361933c4e812d",
          "withoutMetadata": "28ac21e9a19233a5b8273cb6283497541306cafb9a6c64fb4b3e2451fd2b059c",
          "linkedWithoutMetadata": "28ac21e9a19233a5b8273cb6283497541306cafb9a6c64fb4b3e2451fd2b059c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "balance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2047",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2047": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}