{
  "version": "3.2",
  "log": [
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "8981dd2dc5147b438eae76f99b49a8c85f73e95b0bdeb5d115e9cde36b8d5b52",
          "withoutMetadata": "cb76cc60e95e8f9fe89af56602554705ceede7be7c767b09789ac7ce2294efe5",
          "linkedWithoutMetadata": "cb76cc60e95e8f9fe89af56602554705ceede7be7c767b09789ac7ce2294efe5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3643",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3643": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2590",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2590": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2539",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2539": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3015",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3015": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3620",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3620": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "7f408e7d3fd8bc1f75375a682258d1767845c2c6b21b22ae0f9aeba7973a425c",
          "withoutMetadata": "db6c8c254ad2d8784f33d5c77b626fb62307853b6debe984886ecf589a27eba7",
          "linkedWithoutMetadata": "db6c8c254ad2d8784f33d5c77b626fb62307853b6debe984886ecf589a27eba7"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3643",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3643": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2590",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2590": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2539",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2539": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3015",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3015": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3620",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3620": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "137f8638072cb7f84c176d041c14a28c761aaaca83d0fef857d530486abbc353",
          "withoutMetadata": "f415830591d331a44d82c20ddf9c60d31be0e7af91260e9ba9ad21a9d4902794",
          "linkedWithoutMetadata": "f415830591d331a44d82c20ddf9c60d31be0e7af91260e9ba9ad21a9d4902794"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3612",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3612": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2559",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2559": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2508",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2508": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2984",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2984": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3589",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3589": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "459544319887ec04867bd5551fb8a7309ac13ba5f8fd12159ab49046aacbf5ba",
          "withoutMetadata": "6233b614c62df9807ca8787ebb7f6fcfa088c7bf5e20b2eb0a96ca08d051a401",
          "linkedWithoutMetadata": "6233b614c62df9807ca8787ebb7f6fcfa088c7bf5e20b2eb0a96ca08d051a401"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3611",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3611": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2558",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2558": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2507",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2507": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2983",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2983": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3588",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3588": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "22cd574213966cea8f758e1e7dd917cdeb479b56adc18ba0bcd6396d01163161",
          "withoutMetadata": "6233b614c62df9807ca8787ebb7f6fcfa088c7bf5e20b2eb0a96ca08d051a401",
          "linkedWithoutMetadata": "6233b614c62df9807ca8787ebb7f6fcfa088c7bf5e20b2eb0a96ca08d051a401"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3610",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3610": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2557",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2557": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2506",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2506": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2982",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2982": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3587",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3587": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "f649fd2dccf400f3b48e915dcab43d2054897e9a3f783aa67a04e46133174c42",
          "withoutMetadata": "3b3110b0cb25979ed111dc2aadf65e311bc3ddf4798bae1e72d1c8db38dc174b",
          "linkedWithoutMetadata": "3b3110b0cb25979ed111dc2aadf65e311bc3ddf4798bae1e72d1c8db38dc174b"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3595",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3595": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2542",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2542": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2491",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2491": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2967",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2967": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3572",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3572": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1d20f00845c45bb02dc765f35bbca2fafddba754564cd4e79ebabaaaf06b22ab",
          "withoutMetadata": "3bfea476a0e478795b6889071f9c3a1d3cca153d4e9fac69633bfd249bc6c457",
          "linkedWithoutMetadata": "3bfea476a0e478795b6889071f9c3a1d3cca153d4e9fac69633bfd249bc6c457"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3554",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3554": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2501",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2501": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2450",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2450": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2926",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2926": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3531",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3531": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:10",
        "version": {
          "withMetadata": "883e8cb030d1dafe8f426cad1e5fab18bcbd21307cd54c9c2a8572aaba27f171",
          "withoutMetadata": "49df70e7e8391dac3aa86f716089e88e06b4cf1d0f518d3abed1252842e47570",
          "linkedWithoutMetadata": "49df70e7e8391dac3aa86f716089e88e06b4cf1d0f518d3abed1252842e47570"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:11"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)987_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)987_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)987_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2428",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2428": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2377",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2377": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2853",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2853": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3458",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3458": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:10",
        "version": {
          "withMetadata": "de88628b60da443b6e5167a0d9c4bad0f24169c41ef2b82dbb50b665b1da1e9c",
          "withoutMetadata": "2a1e1fb5651f4a178c4f073c7237251740c5d2ef7f8dab768602664bfc52ab09",
          "linkedWithoutMetadata": "2a1e1fb5651f4a178c4f073c7237251740c5d2ef7f8dab768602664bfc52ab09"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "migrationV0(address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:11"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "V0",
              "type": "t_bool",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2438",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2438": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2387",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2387": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2863",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2863": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3468",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3468": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:10",
        "version": {
          "withMetadata": "af11407c233e94b03040645015e2a8394a1b2e5f530675d589d3a912debeac37",
          "withoutMetadata": "bdcc51227d5539e2edc16e2e225b8fa8744564d05be831b83aaa16c4774f9848",
          "linkedWithoutMetadata": "bdcc51227d5539e2edc16e2e225b8fa8744564d05be831b83aaa16c4774f9848"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)981_storage)",
              "src": "contracts/Governance.sol:18"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(FeeLedger)981_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(FeeLedger)981_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2054",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2054": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2003",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2003": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2479",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2479": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3084",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3084": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2093",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2093": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)2698",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2698": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2093",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2093": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "69cd3d118881fb72203b390e75b26d17f810e998ac6f3ec38ee72563b4cbb641",
          "withoutMetadata": "b1b34ea8b5b57eec54f386ff2ff15dfdd80387623ec883bc64dc4ac22f37c611",
          "linkedWithoutMetadata": "b1b34ea8b5b57eec54f386ff2ff15dfdd80387623ec883bc64dc4ac22f37c611"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)2697",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2697": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:146",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2093",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2093": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "650674a24c9aad3795715f86d11c5b9e844ecbe9af85bc8fc7592839a730b570",
          "withoutMetadata": "7fe3226c84a650d0ced4e05f2c470b2cd469600a5627e4bb06df23eeda746275",
          "linkedWithoutMetadata": "7fe3226c84a650d0ced4e05f2c470b2cd469600a5627e4bb06df23eeda746275"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)2692",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2692": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:130",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2093",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2093": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "b2f747f12bf56dfd042fe250073cfed0d8b563f9e2f10dd9ad1456c4e0a90d6f",
          "withoutMetadata": "79b2a10bc5d4a24e2c1f3ed1d308e84e722a4e8798be59c34344a3751aa78b19",
          "linkedWithoutMetadata": "79b2a10bc5d4a24e2c1f3ed1d308e84e722a4e8798be59c34344a3751aa78b19"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_array(t_bool)10_storage",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)2603",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2603": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:124",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "85cdea6a31101ac51dbb62c8d820e8098d0019251805a940c61be5c493d954a0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/VestingV2.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2580",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2580": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "97ae7f774573b60eb5b2dff9f899546659b54db8791a6d518b2a6dce1aeff7d3",
          "withoutMetadata": "0b57387faab644f68f33cfc2cff9dff9ce1ed20f4917287c4d1ce3c9e36c850e",
          "linkedWithoutMetadata": "0b57387faab644f68f33cfc2cff9dff9ce1ed20f4917287c4d1ce3c9e36c850e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2034",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2034": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "0647581abbd07e41f6c9ba0f768ca6cf2e3f9b9c4e64b84a8aad3adb06befe60",
          "withoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1",
          "linkedWithoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2034",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2034": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "d21db212ea4684261e859ee17c3d522f45574f2b62b14d1b9b2b246b62147489",
          "withoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1",
          "linkedWithoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2034",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2034": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "f4eddf840222d770c5d65babbacb28c04b894a958650f12e268ed6df5d9debda",
          "withoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083",
          "linkedWithoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1662",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:16"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:19"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:22"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:27"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:28"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1662": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1611",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1611": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "d21db212ea4684261e859ee17c3d522f45574f2b62b14d1b9b2b246b62147489",
          "withoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1",
          "linkedWithoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2028",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2028": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "f4eddf840222d770c5d65babbacb28c04b894a958650f12e268ed6df5d9debda",
          "withoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083",
          "linkedWithoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1662",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:16"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:19"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:22"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:27"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:28"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1662": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1611",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1611": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "c9e17498f99c1254dec971c99ed96247e12eb2222472e2d08b6d534f91d60dfb",
          "withoutMetadata": "18922d21f8d6e41896c63e567a76cd7d0e93d5db5aec409f55fa782008ee78bc",
          "linkedWithoutMetadata": "18922d21f8d6e41896c63e567a76cd7d0e93d5db5aec409f55fa782008ee78bc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2040",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2040": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "f4eddf840222d770c5d65babbacb28c04b894a958650f12e268ed6df5d9debda",
          "withoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083",
          "linkedWithoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1662",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:16"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:19"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:22"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:27"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:28"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1662": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1611",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1611": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "1b4dbdbd53919db00787a5d38f5d1642715706f6cfd949f3f54adf999fe069ea",
          "withoutMetadata": "18922d21f8d6e41896c63e567a76cd7d0e93d5db5aec409f55fa782008ee78bc",
          "linkedWithoutMetadata": "18922d21f8d6e41896c63e567a76cd7d0e93d5db5aec409f55fa782008ee78bc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2047",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2047": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "f4eddf840222d770c5d65babbacb28c04b894a958650f12e268ed6df5d9debda",
          "withoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083",
          "linkedWithoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1662",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:16"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:19"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:22"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:27"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:28"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1662": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1611",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1611": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "4e6ec9a89ef24facfcf347dd06cb648544fe6d0ea6e3f8a629c361933c4e812d",
          "withoutMetadata": "28ac21e9a19233a5b8273cb6283497541306cafb9a6c64fb4b3e2451fd2b059c",
          "linkedWithoutMetadata": "28ac21e9a19233a5b8273cb6283497541306cafb9a6c64fb4b3e2451fd2b059c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "balance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2047",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2047": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}