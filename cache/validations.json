{
  "version": "3.2",
  "log": [
    {
      "CalHash": {
        "src": "contracts/CalHash.sol:4",
        "version": {
          "withMetadata": "0729ea9798da32218bf441c4c429602f02cfb720b5ccbe4e1f9014b9bcc546a6",
          "withoutMetadata": "9b7694ed2ffd2d5922766622ccdbaa9eada6d0c557a20ae8fbcb6b0391057af9",
          "linkedWithoutMetadata": "9b7694ed2ffd2d5922766622ccdbaa9eada6d0c557a20ae8fbcb6b0391057af9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "5392f4ee42c225f39a5b0f7642afecb74a688323bb0d9e8838ddf0ca3aa7c387",
          "withoutMetadata": "df5b6e6897da081fad2f87a69a4ec63a2db1c6dd028c2391c1e4f57bd037d196",
          "linkedWithoutMetadata": "df5b6e6897da081fad2f87a69a4ec63a2db1c6dd028c2391c1e4f57bd037d196"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "3b262c049dfbe07ea497f53854ecdfafca1afda67f71d8bc4cd72898036f10dd",
          "withoutMetadata": "ada995b2c1da88fc7b8eb21deab0ffa6010d1f244cdeb0166148841d1460ffc7",
          "linkedWithoutMetadata": "ada995b2c1da88fc7b8eb21deab0ffa6010d1f244cdeb0166148841d1460ffc7"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address,address,address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "handleFees()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)5214",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)5232",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)5214": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)5232": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "fd6d5cbb3c108f2a3d8dff7e3e1761539d33d805a56c05629d5ecbd8c6a31729",
          "withoutMetadata": "fbe2fec3ce63f7974954048dc84b5ca438f6b68d65a35292205ab575c53dbbde",
          "linkedWithoutMetadata": "fbe2fec3ce63f7974954048dc84b5ca438f6b68d65a35292205ab575c53dbbde"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "pairFor(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:10",
        "version": {
          "withMetadata": "602b6c275b0979853e135bf56d11350fe1437f1385cb7cb246b4e863a096909b",
          "withoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c",
          "linkedWithoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:15"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:16"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)101",
              "src": "contracts/uniswapv2/earningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC",
              "type": "t_contract(OZ_IERC20)101",
              "src": "contracts/uniswapv2/earningsManager.sol:21"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)5232",
              "src": "contracts/uniswapv2/earningsManager.sol:22"
            },
            {
              "contract": "EarningsManager",
              "label": "LiquidityPool",
              "type": "t_contract(IUniswapV2Pair)4786",
              "src": "contracts/uniswapv2/earningsManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]"
            },
            "t_contract(OZ_IERC20)101": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)5232": {
              "label": "contract iGovernance"
            },
            "t_contract(IUniswapV2Pair)4786": {
              "label": "contract IUniswapV2Pair"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "4c8fdda477f8b29ab81e4630d550dc23d3921440912d60dc94e6b9cc275750af",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/CalHash.sol:4",
        "version": {
          "withMetadata": "0729ea9798da32218bf441c4c429602f02cfb720b5ccbe4e1f9014b9bcc546a6",
          "withoutMetadata": "9b7694ed2ffd2d5922766622ccdbaa9eada6d0c557a20ae8fbcb6b0391057af9",
          "linkedWithoutMetadata": "9b7694ed2ffd2d5922766622ccdbaa9eada6d0c557a20ae8fbcb6b0391057af9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "5392f4ee42c225f39a5b0f7642afecb74a688323bb0d9e8838ddf0ca3aa7c387",
          "withoutMetadata": "df5b6e6897da081fad2f87a69a4ec63a2db1c6dd028c2391c1e4f57bd037d196",
          "linkedWithoutMetadata": "df5b6e6897da081fad2f87a69a4ec63a2db1c6dd028c2391c1e4f57bd037d196"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "3b262c049dfbe07ea497f53854ecdfafca1afda67f71d8bc4cd72898036f10dd",
          "withoutMetadata": "ada995b2c1da88fc7b8eb21deab0ffa6010d1f244cdeb0166148841d1460ffc7",
          "linkedWithoutMetadata": "ada995b2c1da88fc7b8eb21deab0ffa6010d1f244cdeb0166148841d1460ffc7"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address,address,address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "handleFees()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)5214",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)5232",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)5214": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)5232": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "9d57f579c6aaba74468cdc014c707ee4a1f887b463178e5d3bae928c91840e18",
          "withoutMetadata": "671bca6915a0b5e52813517bcf685ed7b03acdaee40ecc603a5b2f2a7a613c55",
          "linkedWithoutMetadata": "671bca6915a0b5e52813517bcf685ed7b03acdaee40ecc603a5b2f2a7a613c55"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "pairFor(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:10",
        "version": {
          "withMetadata": "602b6c275b0979853e135bf56d11350fe1437f1385cb7cb246b4e863a096909b",
          "withoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c",
          "linkedWithoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:15"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:16"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)101",
              "src": "contracts/uniswapv2/earningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC",
              "type": "t_contract(OZ_IERC20)101",
              "src": "contracts/uniswapv2/earningsManager.sol:21"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)5232",
              "src": "contracts/uniswapv2/earningsManager.sol:22"
            },
            {
              "contract": "EarningsManager",
              "label": "LiquidityPool",
              "type": "t_contract(IUniswapV2Pair)4786",
              "src": "contracts/uniswapv2/earningsManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]"
            },
            "t_contract(OZ_IERC20)101": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)5232": {
              "label": "contract iGovernance"
            },
            "t_contract(IUniswapV2Pair)4786": {
              "label": "contract IUniswapV2Pair"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/CalHash.sol:4",
        "version": {
          "withMetadata": "40dad9f4f2601358b24ec4cfd38d12c20d008c8d11a6ab6176f0b7cfe691ad82",
          "withoutMetadata": "2f7377496c83ef22ff9ca2fb1fb0bd08011ffc94e63fad7418d70b1abae1cf32",
          "linkedWithoutMetadata": "2f7377496c83ef22ff9ca2fb1fb0bd08011ffc94e63fad7418d70b1abae1cf32"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "7fb5123025011c2f2706f4cd8a734174573fccafd6a55ecf89edaf1720a739ad",
          "withoutMetadata": "b74303f2b35faaba93239ae95a087746f36876b17398ddd6695ee273383111c7",
          "linkedWithoutMetadata": "b74303f2b35faaba93239ae95a087746f36876b17398ddd6695ee273383111c7"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "68862c972e5c1d94dbdd2e42dfbcb47d91a6abdcc2a84ed2a20ae4b354f38a43",
          "withoutMetadata": "0bdbf6f4260b9f9478703b2a33a44c48eb28a939d92601cf8bc37ae0c81c5fb0",
          "linkedWithoutMetadata": "0bdbf6f4260b9f9478703b2a33a44c48eb28a939d92601cf8bc37ae0c81c5fb0"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "handleFees()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)5169",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)5187",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)5169": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)5187": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "9d57f579c6aaba74468cdc014c707ee4a1f887b463178e5d3bae928c91840e18",
          "withoutMetadata": "671bca6915a0b5e52813517bcf685ed7b03acdaee40ecc603a5b2f2a7a613c55",
          "linkedWithoutMetadata": "671bca6915a0b5e52813517bcf685ed7b03acdaee40ecc603a5b2f2a7a613c55"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "pairFor(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:10",
        "version": {
          "withMetadata": "602b6c275b0979853e135bf56d11350fe1437f1385cb7cb246b4e863a096909b",
          "withoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c",
          "linkedWithoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:15"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:16"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)101",
              "src": "contracts/uniswapv2/earningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC",
              "type": "t_contract(OZ_IERC20)101",
              "src": "contracts/uniswapv2/earningsManager.sol:21"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)5187",
              "src": "contracts/uniswapv2/earningsManager.sol:22"
            },
            {
              "contract": "EarningsManager",
              "label": "LiquidityPool",
              "type": "t_contract(IUniswapV2Pair)4741",
              "src": "contracts/uniswapv2/earningsManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]"
            },
            "t_contract(OZ_IERC20)101": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)5187": {
              "label": "contract iGovernance"
            },
            "t_contract(IUniswapV2Pair)4741": {
              "label": "contract IUniswapV2Pair"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "7fb5123025011c2f2706f4cd8a734174573fccafd6a55ecf89edaf1720a739ad",
          "withoutMetadata": "b74303f2b35faaba93239ae95a087746f36876b17398ddd6695ee273383111c7",
          "linkedWithoutMetadata": "b74303f2b35faaba93239ae95a087746f36876b17398ddd6695ee273383111c7"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "68862c972e5c1d94dbdd2e42dfbcb47d91a6abdcc2a84ed2a20ae4b354f38a43",
          "withoutMetadata": "0bdbf6f4260b9f9478703b2a33a44c48eb28a939d92601cf8bc37ae0c81c5fb0",
          "linkedWithoutMetadata": "0bdbf6f4260b9f9478703b2a33a44c48eb28a939d92601cf8bc37ae0c81c5fb0"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "handleFees()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)5145",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)5163",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)5145": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)5163": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "9d57f579c6aaba74468cdc014c707ee4a1f887b463178e5d3bae928c91840e18",
          "withoutMetadata": "671bca6915a0b5e52813517bcf685ed7b03acdaee40ecc603a5b2f2a7a613c55",
          "linkedWithoutMetadata": "671bca6915a0b5e52813517bcf685ed7b03acdaee40ecc603a5b2f2a7a613c55"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "pairFor(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:10",
        "version": {
          "withMetadata": "602b6c275b0979853e135bf56d11350fe1437f1385cb7cb246b4e863a096909b",
          "withoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c",
          "linkedWithoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:15"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:16"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:21"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)5163",
              "src": "contracts/uniswapv2/earningsManager.sol:22"
            },
            {
              "contract": "EarningsManager",
              "label": "LiquidityPool",
              "type": "t_contract(IUniswapV2Pair)4717",
              "src": "contracts/uniswapv2/earningsManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]"
            },
            "t_contract(OZ_IERC20)77": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)5163": {
              "label": "contract iGovernance"
            },
            "t_contract(IUniswapV2Pair)4717": {
              "label": "contract IUniswapV2Pair"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "5392f4ee42c225f39a5b0f7642afecb74a688323bb0d9e8838ddf0ca3aa7c387",
          "withoutMetadata": "df5b6e6897da081fad2f87a69a4ec63a2db1c6dd028c2391c1e4f57bd037d196",
          "linkedWithoutMetadata": "df5b6e6897da081fad2f87a69a4ec63a2db1c6dd028c2391c1e4f57bd037d196"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "3b262c049dfbe07ea497f53854ecdfafca1afda67f71d8bc4cd72898036f10dd",
          "withoutMetadata": "ada995b2c1da88fc7b8eb21deab0ffa6010d1f244cdeb0166148841d1460ffc7",
          "linkedWithoutMetadata": "ada995b2c1da88fc7b8eb21deab0ffa6010d1f244cdeb0166148841d1460ffc7"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address,address,address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "handleFees()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)5190",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)5208",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)5190": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)5208": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "9d57f579c6aaba74468cdc014c707ee4a1f887b463178e5d3bae928c91840e18",
          "withoutMetadata": "671bca6915a0b5e52813517bcf685ed7b03acdaee40ecc603a5b2f2a7a613c55",
          "linkedWithoutMetadata": "671bca6915a0b5e52813517bcf685ed7b03acdaee40ecc603a5b2f2a7a613c55"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "pairFor(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:10",
        "version": {
          "withMetadata": "602b6c275b0979853e135bf56d11350fe1437f1385cb7cb246b4e863a096909b",
          "withoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c",
          "linkedWithoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:15"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:16"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:21"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)5208",
              "src": "contracts/uniswapv2/earningsManager.sol:22"
            },
            {
              "contract": "EarningsManager",
              "label": "LiquidityPool",
              "type": "t_contract(IUniswapV2Pair)4762",
              "src": "contracts/uniswapv2/earningsManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]"
            },
            "t_contract(OZ_IERC20)77": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)5208": {
              "label": "contract iGovernance"
            },
            "t_contract(IUniswapV2Pair)4762": {
              "label": "contract IUniswapV2Pair"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "5392f4ee42c225f39a5b0f7642afecb74a688323bb0d9e8838ddf0ca3aa7c387",
          "withoutMetadata": "df5b6e6897da081fad2f87a69a4ec63a2db1c6dd028c2391c1e4f57bd037d196",
          "linkedWithoutMetadata": "df5b6e6897da081fad2f87a69a4ec63a2db1c6dd028c2391c1e4f57bd037d196"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "3b262c049dfbe07ea497f53854ecdfafca1afda67f71d8bc4cd72898036f10dd",
          "withoutMetadata": "ada995b2c1da88fc7b8eb21deab0ffa6010d1f244cdeb0166148841d1460ffc7",
          "linkedWithoutMetadata": "ada995b2c1da88fc7b8eb21deab0ffa6010d1f244cdeb0166148841d1460ffc7"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address,address,address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "handleFees()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)5190",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)5208",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)5190": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)5208": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "e4d787d25cb0389e180daf53ac4ec1aaaf2c618cb2974c8d1767f82639d9e3d3",
          "withoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326",
          "linkedWithoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:10",
        "version": {
          "withMetadata": "602b6c275b0979853e135bf56d11350fe1437f1385cb7cb246b4e863a096909b",
          "withoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c",
          "linkedWithoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:15"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:16"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:21"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)5208",
              "src": "contracts/uniswapv2/earningsManager.sol:22"
            },
            {
              "contract": "EarningsManager",
              "label": "LiquidityPool",
              "type": "t_contract(IUniswapV2Pair)4762",
              "src": "contracts/uniswapv2/earningsManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]"
            },
            "t_contract(OZ_IERC20)77": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)5208": {
              "label": "contract iGovernance"
            },
            "t_contract(IUniswapV2Pair)4762": {
              "label": "contract IUniswapV2Pair"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "a5ee106d6fd17d51018beaf455e9eca1a715e52a0b97683109d62dd4487fdb12",
          "withoutMetadata": "df5b6e6897da081fad2f87a69a4ec63a2db1c6dd028c2391c1e4f57bd037d196",
          "linkedWithoutMetadata": "df5b6e6897da081fad2f87a69a4ec63a2db1c6dd028c2391c1e4f57bd037d196"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "3b262c049dfbe07ea497f53854ecdfafca1afda67f71d8bc4cd72898036f10dd",
          "withoutMetadata": "ada995b2c1da88fc7b8eb21deab0ffa6010d1f244cdeb0166148841d1460ffc7",
          "linkedWithoutMetadata": "ada995b2c1da88fc7b8eb21deab0ffa6010d1f244cdeb0166148841d1460ffc7"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address,address,address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "handleFees()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)5171",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)5189",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)5171": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)5189": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "5cdbb7d184a1f485da494f0910aaea941dee398911b7e67f508a16aabd25313f",
          "withoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326",
          "linkedWithoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:10",
        "version": {
          "withMetadata": "602b6c275b0979853e135bf56d11350fe1437f1385cb7cb246b4e863a096909b",
          "withoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c",
          "linkedWithoutMetadata": "492d7f62f6c172326b362cfb619cb224001de42403261a70cff3e56f4a63f80c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:15"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token0_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:16"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WETH",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "SWAP_PATH_token1_WBTC",
              "type": "t_array(t_address)2_storage",
              "src": "contracts/uniswapv2/earningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:21"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)5189",
              "src": "contracts/uniswapv2/earningsManager.sol:22"
            },
            {
              "contract": "EarningsManager",
              "label": "LiquidityPool",
              "type": "t_contract(IUniswapV2Pair)4743",
              "src": "contracts/uniswapv2/earningsManager.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]"
            },
            "t_contract(OZ_IERC20)77": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)5189": {
              "label": "contract iGovernance"
            },
            "t_contract(IUniswapV2Pair)4743": {
              "label": "contract IUniswapV2Pair"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "e9d8b38a2899ec35ebe7976d587fd9a81bb8472eef4c226c48b7995c78283fd1",
          "withoutMetadata": "02386b4e59e52540a5e3773250a5f687d87a39a596333d9c9b7c29030d709bab",
          "linkedWithoutMetadata": "02386b4e59e52540a5e3773250a5f687d87a39a596333d9c9b7c29030d709bab"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "918db77c3515f120a0249dc5394a05b05e13ef49c7c3ec0ce0fd6d0e2e78275a",
          "withoutMetadata": "f3301d146d81c33dc3326f7d2bd4c256a9f0c87a70684cda2fca11cf90ad6c75",
          "linkedWithoutMetadata": "f3301d146d81c33dc3326f7d2bd4c256a9f0c87a70684cda2fca11cf90ad6c75"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address,address,address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "handleFees()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)5155",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)5173",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)5155": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)5173": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "5cdbb7d184a1f485da494f0910aaea941dee398911b7e67f508a16aabd25313f",
          "withoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326",
          "linkedWithoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:10",
        "version": {
          "withMetadata": "d8eb3c7a2c209f4e7e9f0cd0b922644b097c4eb9abba946df4982869a7976c0f",
          "withoutMetadata": "df7921438027e04f551fda015394b3a3e208d52da955a1d18b6a0c7c39bec45c",
          "linkedWithoutMetadata": "df7921438027e04f551fda015394b3a3e208d52da955a1d18b6a0c7c39bec45c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:15"
            },
            {
              "contract": "EarningsManager",
              "label": "WBTC",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:16"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)5173",
              "src": "contracts/uniswapv2/earningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "LiquidityPool",
              "type": "t_contract(IUniswapV2Pair)4727",
              "src": "contracts/uniswapv2/earningsManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(OZ_IERC20)77": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)5173": {
              "label": "contract iGovernance"
            },
            "t_contract(IUniswapV2Pair)4727": {
              "label": "contract IUniswapV2Pair"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)",
          "manageFees()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "0082c3681a40d8d7b0b3883deb1b59a91a1e17393a1d612f7a3fc3e0a812da61",
          "withoutMetadata": "579ce0045adcabaa4f2e77968c0c47125ec024cfca1a341e1b484a96a0a48ef9",
          "linkedWithoutMetadata": "579ce0045adcabaa4f2e77968c0c47125ec024cfca1a341e1b484a96a0a48ef9"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "11c8866eb1af94a3ab5d76dddf1c38a64f8414c285023b98f29f60a57f179c0e",
          "withoutMetadata": "90b2f6dab931ffeb6a9693989287f02785585d471f3e4c6ee3b3874fd3eefb35",
          "linkedWithoutMetadata": "90b2f6dab931ffeb6a9693989287f02785585d471f3e4c6ee3b3874fd3eefb35"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)5039",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)5057",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)5039": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)5057": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "5cdbb7d184a1f485da494f0910aaea941dee398911b7e67f508a16aabd25313f",
          "withoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326",
          "linkedWithoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:10",
        "version": {
          "withMetadata": "2263993b9c9510db93f3bbf4e539f18a43fadfb8c9de3def2317959127fc8df9",
          "withoutMetadata": "a60baf164a83ccbe45a1225eebc73328536c2359111b1e414227d8f731f367db",
          "linkedWithoutMetadata": "a60baf164a83ccbe45a1225eebc73328536c2359111b1e414227d8f731f367db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "manageEarnings(address)",
          "manageFee()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WETH",
            "src": "contracts/uniswapv2/earningsManager.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)5057",
              "src": "contracts/uniswapv2/earningsManager.sol:15"
            },
            {
              "contract": "EarningsManager",
              "label": "LiquidityPool",
              "type": "t_contract(IUniswapV2Pair)4614",
              "src": "contracts/uniswapv2/earningsManager.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(OZ_IERC20)77": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)5057": {
              "label": "contract iGovernance"
            },
            "t_contract(IUniswapV2Pair)4614": {
              "label": "contract IUniswapV2Pair"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "93537fa9d2260da98ee17ad4be54cffbd1c5bedfa9722f567f8b6fe576e7019f",
          "withoutMetadata": "fae0e9ae52cbef648c76511b07749d4d9341e1c2ec6aa464a49fe1aefb4752ff",
          "linkedWithoutMetadata": "fae0e9ae52cbef648c76511b07749d4d9341e1c2ec6aa464a49fe1aefb4752ff"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "216c81cda7ad1bfd95d9c5d40f1edb1d582606f6ce9b43b5b9e86f4ff07557d5",
          "withoutMetadata": "032a705c4e0fc6e81aff0d661fb556556ec87bf81cab0379ccfd013c287723ac",
          "linkedWithoutMetadata": "032a705c4e0fc6e81aff0d661fb556556ec87bf81cab0379ccfd013c287723ac"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)5021",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)5039",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)5021": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)5039": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "5cdbb7d184a1f485da494f0910aaea941dee398911b7e67f508a16aabd25313f",
          "withoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326",
          "linkedWithoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:8",
        "version": {
          "withMetadata": "b0659dcf0285e3f06ae71dc4a1ac0187efd6aee0f3b884394f9ddc330fbee9e9",
          "withoutMetadata": "4d8f1bea2e58baae2ad98e4204ca5fcb2e5598ec17129f3daf926ccde0ffadf3",
          "linkedWithoutMetadata": "4d8f1bea2e58baae2ad98e4204ca5fcb2e5598ec17129f3daf926ccde0ffadf3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "manageEarnings(address)",
          "manageFee()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WETH",
            "src": "contracts/uniswapv2/earningsManager.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:9"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:10"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)5039",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "LPtoken",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(OZ_IERC20)77": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)5039": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "d77f195246309005b5d92031f374f67774a7188b556e8c91c4668ccfc20726f1",
          "withoutMetadata": "0afd8c393ec8e2610b5a849fc5943bda80cc212a36fad17b2af32873091b5825",
          "linkedWithoutMetadata": "0afd8c393ec8e2610b5a849fc5943bda80cc212a36fad17b2af32873091b5825"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "5b8824cbaafb58b751fa6e4f6b3ef6c52a302ed0f15c691ab61d754e2c605d41",
          "withoutMetadata": "3e873fd5b9049ea285a3e3ca85ba1a7c6e393cc46d4b826db5906d33459435ce",
          "linkedWithoutMetadata": "3e873fd5b9049ea285a3e3ca85ba1a7c6e393cc46d4b826db5906d33459435ce"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)4965",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)4983",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)4965": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)4983": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "5cdbb7d184a1f485da494f0910aaea941dee398911b7e67f508a16aabd25313f",
          "withoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326",
          "linkedWithoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/earningsManager.sol:8",
        "version": {
          "withMetadata": "23135a89690a5b1b2a8566196302759eafe35a22278e2b98288e755ef49a0fd0",
          "withoutMetadata": "4d8f1bea2e58baae2ad98e4204ca5fcb2e5598ec17129f3daf926ccde0ffadf3",
          "linkedWithoutMetadata": "4d8f1bea2e58baae2ad98e4204ca5fcb2e5598ec17129f3daf926ccde0ffadf3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "manageEarnings(address)",
          "manageFee()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/earningsManager.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WETH",
            "src": "contracts/uniswapv2/earningsManager.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:9"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:10"
            },
            {
              "contract": "EarningsManager",
              "label": "GOVERNOR_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:12"
            },
            {
              "contract": "EarningsManager",
              "label": "Governor",
              "type": "t_contract(iGovernance)4983",
              "src": "contracts/uniswapv2/earningsManager.sol:13"
            },
            {
              "contract": "EarningsManager",
              "label": "LPtoken",
              "type": "t_contract(OZ_IERC20)77",
              "src": "contracts/uniswapv2/earningsManager.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(OZ_IERC20)77": {
              "label": "contract OZ_IERC20"
            },
            "t_contract(iGovernance)4983": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "EarningsManager": {
        "src": "contracts/earningsManager.sol:7",
        "version": {
          "withMetadata": "dea7b251846ca1b2c01114a445b8d448d3fe028e07cdc2c08522cfae34c8e304",
          "withoutMetadata": "93770b0fe2cd263d9866efe47f7b24e1ed34bee72cb6072a9f0fccc1b9c09a19",
          "linkedWithoutMetadata": "93770b0fe2cd263d9866efe47f7b24e1ed34bee72cb6072a9f0fccc1b9c09a19"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "manageEarnings(address)",
          "manageFee()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/earningsManager.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WETH",
            "src": "contracts/earningsManager.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/earningsManager.sol:8"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/earningsManager.sol:9"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(OZ_IERC20)133",
              "src": "contracts/earningsManager.sol:10"
            },
            {
              "contract": "EarningsManager",
              "label": "LPtoken",
              "type": "t_contract(OZ_IERC20)133",
              "src": "contracts/earningsManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(OZ_IERC20)133": {
              "label": "contract OZ_IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "c8c3efc85d7e099c35c1e0656266f6d7e641cd96ef323d22aee4afe5c63f6719",
          "withoutMetadata": "9ae3b1bc8b946e6c2912b0af69c0d42fd93c79e6d0b33133187746c56f77ef2b",
          "linkedWithoutMetadata": "9ae3b1bc8b946e6c2912b0af69c0d42fd93c79e6d0b33133187746c56f77ef2b"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "f79d6327ed7ad329f1d5e4b61f0e3724822a270b22f2a632ac02512cc1677166",
          "withoutMetadata": "6cd6181c1791e4b11fcf306cd9b5a8e0a8751ca533cb0f110be45b6990bc417d",
          "linkedWithoutMetadata": "6cd6181c1791e4b11fcf306cd9b5a8e0a8751ca533cb0f110be45b6990bc417d"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "changePause(bool)",
          "changeEarningsManager(address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "Governor",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(iEarningsManager)4926",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)4937",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:46"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(iEarningsManager)4926": {
              "label": "contract iEarningsManager"
            },
            "t_contract(iGovernance)4937": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "5cdbb7d184a1f485da494f0910aaea941dee398911b7e67f508a16aabd25313f",
          "withoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326",
          "linkedWithoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/iEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manageEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "iGovernance": {
        "src": "contracts/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "EarningsManager": {
        "src": "contracts/earningsManager.sol:7",
        "version": {
          "withMetadata": "e26cdf8cf0be857033dc3e0ed83a10ee853155a1c75b20b206e9eb772f4742ee",
          "withoutMetadata": "b77aefc6a7fa01abe545c836b4863c063a9169fe7b49b15bf7dce4ec574a829a",
          "linkedWithoutMetadata": "b77aefc6a7fa01abe545c836b4863c063a9169fe7b49b15bf7dce4ec574a829a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "manageEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/earningsManager.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WETH",
            "src": "contracts/earningsManager.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/earningsManager.sol:8"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/earningsManager.sol:9"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(IERC20)127",
              "src": "contracts/earningsManager.sol:10"
            },
            {
              "contract": "EarningsManager",
              "label": "LPtoken",
              "type": "t_contract(IERC20)127",
              "src": "contracts/earningsManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/interfaces/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/uniswapv2/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/uniswapv2/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/uniswapv2/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/uniswapv2/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:9",
        "version": {
          "withMetadata": "e3b9ee5bcb35764448017e6cb16360d458147379748944c14c37b995ab7bb376",
          "withoutMetadata": "6a841256aacf00f97f6b2811db0721f3b67cddae49d77b36b24a025e12d729cd",
          "linkedWithoutMetadata": "6a841256aacf00f97f6b2811db0721f3b67cddae49d77b36b24a025e12d729cd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:12"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:19",
        "version": {
          "withMetadata": "1377f086c8e23e8ee45eaae6f5b26c6828d3b594a63c706c4cc2f779e9de7b1b",
          "withoutMetadata": "c30a4f9f17a4212954c295611333dacc74f6b1e1aa90dae91c07f36e76809f97",
          "linkedWithoutMetadata": "c30a4f9f17a4212954c295611333dacc74f6b1e1aa90dae91c07f36e76809f97"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:41"
          },
          {
            "kind": "state-variable-assignment",
            "name": "Governor",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:26"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:27"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:31"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:35"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:41"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(EarningsManager)49",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:42"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Governor",
              "type": "t_contract(iGovernance)4947",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(EarningsManager)49": {
              "label": "contract EarningsManager"
            },
            "t_contract(iGovernance)4947": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "5cdbb7d184a1f485da494f0910aaea941dee398911b7e67f508a16aabd25313f",
          "withoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326",
          "linkedWithoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "b51b70a01ddd6f094b08d4473ad03fecdd6b73f4957f48d5fd79f86e919cbd6f",
          "withoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe",
          "linkedWithoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3832",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3832": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/interfaces/iGovernance.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "17891c1d8f5c1deb56e0b334beba34d78139697078df9b7ae68c75c4a71296ea",
          "withoutMetadata": "3bdf0c07d5f062e0559d78f28379533711e37221bec52b3bdac2bbc4ec7c3dca",
          "linkedWithoutMetadata": "3bdf0c07d5f062e0559d78f28379533711e37221bec52b3bdac2bbc4ec7c3dca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3799",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3799": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "EarningsManager": {
        "src": "contracts/earningsManager.sol:7",
        "version": {
          "withMetadata": "9e9cd795c18b45c62588ff15ef6eb5a3da483b3992fe8805acf10e9d85b5ccd5",
          "withoutMetadata": "b77aefc6a7fa01abe545c836b4863c063a9169fe7b49b15bf7dce4ec574a829a",
          "linkedWithoutMetadata": "b77aefc6a7fa01abe545c836b4863c063a9169fe7b49b15bf7dce4ec574a829a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "manageEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/earningsManager.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WETH",
            "src": "contracts/earningsManager.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/earningsManager.sol:8"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/earningsManager.sol:9"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(IERC20)127",
              "src": "contracts/earningsManager.sol:10"
            },
            {
              "contract": "EarningsManager",
              "label": "LPtoken",
              "type": "t_contract(IERC20)127",
              "src": "contracts/earningsManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)127": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/interfaces/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "96aadcb80f2845005cf6d924bd675ff8d5b1e48751e25eac6780a9d0ed3021fa",
          "withoutMetadata": "6d5abfe1ffd43ae04980e6011d9f34b28974a2016778fd223e146fa7bc9daed8",
          "linkedWithoutMetadata": "6d5abfe1ffd43ae04980e6011d9f34b28974a2016778fd223e146fa7bc9daed8"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:18",
        "version": {
          "withMetadata": "ae4b0bec611090d83ccecd2d000b524f975c627a1e35a417abd0f5a299bee68e",
          "withoutMetadata": "8e5329079ae895b23c1dec7d1c5474af5ac94abb2ad8671e8c0030f8109e7f08",
          "linkedWithoutMetadata": "8e5329079ae895b23c1dec7d1c5474af5ac94abb2ad8671e8c0030f8109e7f08"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:77"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "GFI_ADDRESS",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:25"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:26"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:27"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:31"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:35"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM",
              "type": "t_contract(EarningsManager)49",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:41"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "EM_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(EarningsManager)49": {
              "label": "contract EarningsManager"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "5cdbb7d184a1f485da494f0910aaea941dee398911b7e67f508a16aabd25313f",
          "withoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326",
          "linkedWithoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "0eff975a96b48a051f95a29f40e0bc7d029542ec51fee8455ee6ac94f241b0b8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "b51b70a01ddd6f094b08d4473ad03fecdd6b73f4957f48d5fd79f86e919cbd6f",
          "withoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe",
          "linkedWithoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3869",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3869": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:154",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "17891c1d8f5c1deb56e0b334beba34d78139697078df9b7ae68c75c4a71296ea",
          "withoutMetadata": "3bdf0c07d5f062e0559d78f28379533711e37221bec52b3bdac2bbc4ec7c3dca",
          "linkedWithoutMetadata": "3bdf0c07d5f062e0559d78f28379533711e37221bec52b3bdac2bbc4ec7c3dca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3799",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3799": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/earningsManager.sol:9",
        "version": {
          "withMetadata": "f98c99d43d36b3f17ce05baaa869186d0c433a92769fd0d7727ddc227a2457c0",
          "withoutMetadata": "9e62c1e2a415aa2f57044743d0e16c58f497b09c0383fc8231c55ffebe603e9d",
          "linkedWithoutMetadata": "9e62c1e2a415aa2f57044743d0e16c58f497b09c0383fc8231c55ffebe603e9d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "manageEarnings(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/earningsManager.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WETH",
            "src": "contracts/earningsManager.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "swapAddress",
              "type": "t_address",
              "src": "contracts/earningsManager.sol:10"
            },
            {
              "contract": "EarningsManager",
              "label": "wethAddress",
              "type": "t_address",
              "src": "contracts/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/earningsManager.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "550eec48285fb86cdcebb76d3004afe4f9b3064a4d4a79a0ce101dc3825a76c2",
          "withoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac",
          "linkedWithoutMetadata": "ff09dfc18f1f9a3b92c33f497dc9a0e83666f7d8d612daf57c598f153c7f91ac"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:8",
        "version": {
          "withMetadata": "7bb5c5aec42b10418d89a3ca3675a184549d4a802c5223b763eeae90bf643758",
          "withoutMetadata": "96189de40410bad560d27375c2196301b76bde2a2321f86cf21ebd393214ef78",
          "linkedWithoutMetadata": "96189de40410bad560d27375c2196301b76bde2a2321f86cf21ebd393214ef78"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setMigrator(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:9"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:11"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:13"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:17",
        "version": {
          "withMetadata": "9a1b7c40c18e4340c080129bf71520fb7a878491384d46944566a52a54b2eb08",
          "withoutMetadata": "85bf5780e6ded40f136495604f670f6183c275088734eecc89c3b1f1b1c51c75",
          "linkedWithoutMetadata": "85bf5780e6ded40f136495604f670f6183c275088734eecc89c3b1f1b1c51c75"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:67"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:24"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:25"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:26"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "5cdbb7d184a1f485da494f0910aaea941dee398911b7e67f508a16aabd25313f",
          "withoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326",
          "linkedWithoutMetadata": "40c697357ac65ff32c052816a6f32f8bd18989e4d6bd29c265638e2986ac1326"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "migrator()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "1652f0cd3eedf23c38c3d9e2f6b6f511c82581a991cf80be9ad36d38ff8fa733",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "87f6361e3ef4add031df19d751faa77790204a0115118d9924be32a914d2020c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "d1c1a9f4c6d74a48ac96db15f0891f468f8388d57550d4a4d74168bd6f4ac430",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "7ab55488b87ccb5652234804b0109d0052c0b648be755617432f6a9de021be81",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a4c049c192792669919e278b356e659050e34a25243bb18a35971d186c74674f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "b51b70a01ddd6f094b08d4473ad03fecdd6b73f4957f48d5fd79f86e919cbd6f",
          "withoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe",
          "linkedWithoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3868",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3868": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:154",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "17891c1d8f5c1deb56e0b334beba34d78139697078df9b7ae68c75c4a71296ea",
          "withoutMetadata": "3bdf0c07d5f062e0559d78f28379533711e37221bec52b3bdac2bbc4ec7c3dca",
          "linkedWithoutMetadata": "3bdf0c07d5f062e0559d78f28379533711e37221bec52b3bdac2bbc4ec7c3dca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3799",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3799": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/earningsManager.sol:9",
        "version": {
          "withMetadata": "1bfc8d120da3e97670203b00132290d4a76bef77571c8fda120121addfbacb06",
          "withoutMetadata": "b46fe5f974bbcd84b2c85edc2cd6419a8dd2eec593da9d719f76afd4cb9572d1",
          "linkedWithoutMetadata": "b46fe5f974bbcd84b2c85edc2cd6419a8dd2eec593da9d719f76afd4cb9572d1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "manageEarnings()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/earningsManager.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WETH",
            "src": "contracts/earningsManager.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "swapAddress",
              "type": "t_address",
              "src": "contracts/earningsManager.sol:10"
            },
            {
              "contract": "EarningsManager",
              "label": "wethAddress",
              "type": "t_address",
              "src": "contracts/earningsManager.sol:11"
            },
            {
              "contract": "EarningsManager",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/earningsManager.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "b51b70a01ddd6f094b08d4473ad03fecdd6b73f4957f48d5fd79f86e919cbd6f",
          "withoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe",
          "linkedWithoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3822",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3822": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:154",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "17891c1d8f5c1deb56e0b334beba34d78139697078df9b7ae68c75c4a71296ea",
          "withoutMetadata": "3bdf0c07d5f062e0559d78f28379533711e37221bec52b3bdac2bbc4ec7c3dca",
          "linkedWithoutMetadata": "3bdf0c07d5f062e0559d78f28379533711e37221bec52b3bdac2bbc4ec7c3dca"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3799",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3799": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "b51b70a01ddd6f094b08d4473ad03fecdd6b73f4957f48d5fd79f86e919cbd6f",
          "withoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe",
          "linkedWithoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3807",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3807": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:152",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "585e51dbcf53f83153b8150302aa61f24bc61c0ae0f829356475735764be9b03",
          "withoutMetadata": "8893f4f0546fc888b3acd2b90c52b3c288c6cc90bf293ce701b5780b8cedb93e",
          "linkedWithoutMetadata": "8893f4f0546fc888b3acd2b90c52b3c288c6cc90bf293ce701b5780b8cedb93e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3784",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3784": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "b51b70a01ddd6f094b08d4473ad03fecdd6b73f4957f48d5fd79f86e919cbd6f",
          "withoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe",
          "linkedWithoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3792",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3792": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "6c6239bbb5ea23a1bea207564a592203dbde0b967952fe0e12bc17c2cf825eae",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3769",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3769": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "b51b70a01ddd6f094b08d4473ad03fecdd6b73f4957f48d5fd79f86e919cbd6f",
          "withoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe",
          "linkedWithoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3796",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3796": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "b6873458517dd8adc51a152e2c06da039006cac393bc90bd552d36aee7e0fe9a",
          "withoutMetadata": "427b18c652dacf5ec430c96f204233b49c8110a74648e32e95bf67edcc64dc6e",
          "linkedWithoutMetadata": "427b18c652dacf5ec430c96f204233b49c8110a74648e32e95bf67edcc64dc6e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3773",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3773": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "c23dfacbea3b029db824a55848a0bcff58762f37376a5a97fee9121d696624fa",
          "withoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe",
          "linkedWithoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3796",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3796": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:148",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "e115abf237c05b327260c4539625c17fbc1f376db8f9b3baeedfd7b15e2c47d8",
          "withoutMetadata": "427b18c652dacf5ec430c96f204233b49c8110a74648e32e95bf67edcc64dc6e",
          "linkedWithoutMetadata": "427b18c652dacf5ec430c96f204233b49c8110a74648e32e95bf67edcc64dc6e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3773",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3773": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "c23dfacbea3b029db824a55848a0bcff58762f37376a5a97fee9121d696624fa",
          "withoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe",
          "linkedWithoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3792",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3792": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3769",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3769": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "474a856effc33cdf750781785f7bf1ed9c613f9a460d0239f2836a115154ba3e",
          "withoutMetadata": "a76f9728da36c47124707ae3a2455fcaa53950b4143aace8e4dc68b51e6a05bb",
          "linkedWithoutMetadata": "a76f9728da36c47124707ae3a2455fcaa53950b4143aace8e4dc68b51e6a05bb"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3792",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3792": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3769",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3769": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "b51b70a01ddd6f094b08d4473ad03fecdd6b73f4957f48d5fd79f86e919cbd6f",
          "withoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe",
          "linkedWithoutMetadata": "23aa0e819e563bcf78a947229fd69a59a80809747573ae32c10952d2ab9690fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3792",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3792": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2688",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3769",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3769": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "8981dd2dc5147b438eae76f99b49a8c85f73e95b0bdeb5d115e9cde36b8d5b52",
          "withoutMetadata": "cb76cc60e95e8f9fe89af56602554705ceede7be7c767b09789ac7ce2294efe5",
          "linkedWithoutMetadata": "cb76cc60e95e8f9fe89af56602554705ceede7be7c767b09789ac7ce2294efe5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3643",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3643": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2590",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2590": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2539",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2539": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3015",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3015": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3620",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3620": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "7f408e7d3fd8bc1f75375a682258d1767845c2c6b21b22ae0f9aeba7973a425c",
          "withoutMetadata": "db6c8c254ad2d8784f33d5c77b626fb62307853b6debe984886ecf589a27eba7",
          "linkedWithoutMetadata": "db6c8c254ad2d8784f33d5c77b626fb62307853b6debe984886ecf589a27eba7"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3643",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3643": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2590",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2590": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2539",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2539": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)3015",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3015": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3620",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3620": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "137f8638072cb7f84c176d041c14a28c761aaaca83d0fef857d530486abbc353",
          "withoutMetadata": "f415830591d331a44d82c20ddf9c60d31be0e7af91260e9ba9ad21a9d4902794",
          "linkedWithoutMetadata": "f415830591d331a44d82c20ddf9c60d31be0e7af91260e9ba9ad21a9d4902794"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3612",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3612": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2559",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2559": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2508",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2508": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2984",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2984": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3589",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3589": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "459544319887ec04867bd5551fb8a7309ac13ba5f8fd12159ab49046aacbf5ba",
          "withoutMetadata": "6233b614c62df9807ca8787ebb7f6fcfa088c7bf5e20b2eb0a96ca08d051a401",
          "linkedWithoutMetadata": "6233b614c62df9807ca8787ebb7f6fcfa088c7bf5e20b2eb0a96ca08d051a401"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3611",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3611": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2558",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2558": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2507",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2507": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2983",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2983": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3588",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3588": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "22cd574213966cea8f758e1e7dd917cdeb479b56adc18ba0bcd6396d01163161",
          "withoutMetadata": "6233b614c62df9807ca8787ebb7f6fcfa088c7bf5e20b2eb0a96ca08d051a401",
          "linkedWithoutMetadata": "6233b614c62df9807ca8787ebb7f6fcfa088c7bf5e20b2eb0a96ca08d051a401"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3610",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3610": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2557",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2557": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2506",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2506": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2982",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2982": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3587",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3587": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "f649fd2dccf400f3b48e915dcab43d2054897e9a3f783aa67a04e46133174c42",
          "withoutMetadata": "3b3110b0cb25979ed111dc2aadf65e311bc3ddf4798bae1e72d1c8db38dc174b",
          "linkedWithoutMetadata": "3b3110b0cb25979ed111dc2aadf65e311bc3ddf4798bae1e72d1c8db38dc174b"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3595",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3595": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2542",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2542": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2491",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2491": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2967",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2967": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3572",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3572": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1d20f00845c45bb02dc765f35bbca2fafddba754564cd4e79ebabaaaf06b22ab",
          "withoutMetadata": "3bfea476a0e478795b6889071f9c3a1d3cca153d4e9fac69633bfd249bc6c457",
          "linkedWithoutMetadata": "3bfea476a0e478795b6889071f9c3a1d3cca153d4e9fac69633bfd249bc6c457"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)3554",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)3554": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2501",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2501": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2450",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2450": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2926",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2926": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3531",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3531": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:10",
        "version": {
          "withMetadata": "883e8cb030d1dafe8f426cad1e5fab18bcbd21307cd54c9c2a8572aaba27f171",
          "withoutMetadata": "49df70e7e8391dac3aa86f716089e88e06b4cf1d0f518d3abed1252842e47570",
          "linkedWithoutMetadata": "49df70e7e8391dac3aa86f716089e88e06b4cf1d0f518d3abed1252842e47570"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:11"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)987_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)987_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)987_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2428",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2428": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2377",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2377": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2853",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2853": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3458",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3458": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:10",
        "version": {
          "withMetadata": "de88628b60da443b6e5167a0d9c4bad0f24169c41ef2b82dbb50b665b1da1e9c",
          "withoutMetadata": "2a1e1fb5651f4a178c4f073c7237251740c5d2ef7f8dab768602664bfc52ab09",
          "linkedWithoutMetadata": "2a1e1fb5651f4a178c4f073c7237251740c5d2ef7f8dab768602664bfc52ab09"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "migrationV0(address,address)",
          "updateFee(address)",
          "claimFee()",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:11"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "V0",
              "type": "t_bool",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)989_storage)",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(FeeLedger)989_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)989_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2438",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2438": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2387",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2387": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2863",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2863": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3468",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3468": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:10",
        "version": {
          "withMetadata": "af11407c233e94b03040645015e2a8394a1b2e5f530675d589d3a912debeac37",
          "withoutMetadata": "bdcc51227d5539e2edc16e2e225b8fa8744564d05be831b83aaa16c4774f9848",
          "linkedWithoutMetadata": "bdcc51227d5539e2edc16e2e225b8fa8744564d05be831b83aaa16c4774f9848"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)981_storage)",
              "src": "contracts/Governance.sol:18"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Governance.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(FeeLedger)981_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(FeeLedger)981_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)2054",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)2054": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)2003",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)2003": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2479",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2479": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)916",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)3084",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)916": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)3084": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2093",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2093": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "994be8ac008217dd2def50d2c27c8d980653bd0e70a7eaa0c622a36f1df5436f",
          "withoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc",
          "linkedWithoutMetadata": "490a7fe5d2f493a3a3b8dbdcbc00c80f3928ab562f0af2f369967b1b74766cbc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)2698",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2698": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:147",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2093",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2093": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "69cd3d118881fb72203b390e75b26d17f810e998ac6f3ec38ee72563b4cbb641",
          "withoutMetadata": "b1b34ea8b5b57eec54f386ff2ff15dfdd80387623ec883bc64dc4ac22f37c611",
          "linkedWithoutMetadata": "b1b34ea8b5b57eec54f386ff2ff15dfdd80387623ec883bc64dc4ac22f37c611"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)2697",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2697": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:146",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2093",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2093": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "650674a24c9aad3795715f86d11c5b9e844ecbe9af85bc8fc7592839a730b570",
          "withoutMetadata": "7fe3226c84a650d0ced4e05f2c470b2cd469600a5627e4bb06df23eeda746275",
          "linkedWithoutMetadata": "7fe3226c84a650d0ced4e05f2c470b2cd469600a5627e4bb06df23eeda746275"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)2692",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2692": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:130",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "3097941a9413c5de01c5029645ed00189bade1626ec6edd030a0d2f0d15fa6e0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2093",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2093": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "b2f747f12bf56dfd042fe250073cfed0d8b563f9e2f10dd9ad1456c4e0a90d6f",
          "withoutMetadata": "79b2a10bc5d4a24e2c1f3ed1d308e84e722a4e8798be59c34344a3751aa78b19",
          "linkedWithoutMetadata": "79b2a10bc5d4a24e2c1f3ed1d308e84e722a4e8798be59c34344a3751aa78b19"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_array(t_bool)10_storage",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)2603",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2603": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/VestingV2.sol:124",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/VestingV2.sol:8",
        "version": {
          "withMetadata": "85cdea6a31101ac51dbb62c8d820e8098d0019251805a940c61be5c493d954a0",
          "withoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd",
          "linkedWithoutMetadata": "d62cb4160a536b99be8503d501b6b91489ede66bcb51aaedcebe9f747f28e0bd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/VestingV2.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2580",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2580": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "321f32d67bca52dd7ecfe282946264761454d4213b0e32dc3140c47d44810fcc",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:12"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "97ae7f774573b60eb5b2dff9f899546659b54db8791a6d518b2a6dce1aeff7d3",
          "withoutMetadata": "0b57387faab644f68f33cfc2cff9dff9ce1ed20f4917287c4d1ce3c9e36c850e",
          "linkedWithoutMetadata": "0b57387faab644f68f33cfc2cff9dff9ce1ed20f4917287c4d1ce3c9e36c850e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2034",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2034": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:105",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "0647581abbd07e41f6c9ba0f768ca6cf2e3f9b9c4e64b84a8aad3adb06befe60",
          "withoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1",
          "linkedWithoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2034",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2034": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "ce79b9a18475e67f8d6e6803255ad0016b10a0c1c85165368da331b1a1151d5a",
          "withoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e",
          "linkedWithoutMetadata": "542460c078536f2601ef8eb79f773f547d41b6d1ab3a7abb2f4351028e23173e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1668",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1668": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1617",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1617": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "d21db212ea4684261e859ee17c3d522f45574f2b62b14d1b9b2b246b62147489",
          "withoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1",
          "linkedWithoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2034",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2034": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "f4eddf840222d770c5d65babbacb28c04b894a958650f12e268ed6df5d9debda",
          "withoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083",
          "linkedWithoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1662",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:16"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:19"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:22"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:27"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:28"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1662": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1611",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1611": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "d21db212ea4684261e859ee17c3d522f45574f2b62b14d1b9b2b246b62147489",
          "withoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1",
          "linkedWithoutMetadata": "a7cd0964fbf935629f0322432bd554f13f588386798b38ee1eacd421b9eb9db1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2028",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2028": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "f4eddf840222d770c5d65babbacb28c04b894a958650f12e268ed6df5d9debda",
          "withoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083",
          "linkedWithoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1662",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:16"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:19"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:22"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:27"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:28"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1662": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1611",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1611": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "c9e17498f99c1254dec971c99ed96247e12eb2222472e2d08b6d534f91d60dfb",
          "withoutMetadata": "18922d21f8d6e41896c63e567a76cd7d0e93d5db5aec409f55fa782008ee78bc",
          "linkedWithoutMetadata": "18922d21f8d6e41896c63e567a76cd7d0e93d5db5aec409f55fa782008ee78bc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2040",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2040": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "f4eddf840222d770c5d65babbacb28c04b894a958650f12e268ed6df5d9debda",
          "withoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083",
          "linkedWithoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1662",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:16"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:19"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:22"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:27"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:28"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1662": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1611",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1611": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "1b4dbdbd53919db00787a5d38f5d1642715706f6cfd949f3f54adf999fe069ea",
          "withoutMetadata": "18922d21f8d6e41896c63e567a76cd7d0e93d5db5aec409f55fa782008ee78bc",
          "linkedWithoutMetadata": "18922d21f8d6e41896c63e567a76cd7d0e93d5db5aec409f55fa782008ee78bc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2047",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2047": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "f131ab53715463769f41008d72e5c6fdc6e91a1716eca96b988c90638acd51d2",
          "withoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7",
          "linkedWithoutMetadata": "178b1377fc5853149c921b28f53ff2355d7c534d6a236c296423fd3b275859b7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "f4eddf840222d770c5d65babbacb28c04b894a958650f12e268ed6df5d9debda",
          "withoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083",
          "linkedWithoutMetadata": "e7941ffc04f2973ed0db7f944d70873db750574699cef90c40eb0fee9920f083"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)1662",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:16"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:19"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:22"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:27"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:28"
            }
          ],
          "types": {
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)1662": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "057ab4925a881037867ddeac3053013263c742c4de92533f03bddf8a3112a90e",
          "withoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3",
          "linkedWithoutMetadata": "a4bb05ea64dc8934d044d61be8d448b12b9d6a4eca772035602be34ddbdd63f3"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "govenor",
              "type": "t_contract(iGovernance)1611",
              "src": "contracts/GravityToken.sol:11"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)1611": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/Locking.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "1df73524a2528d84df0cba3ec8cf0f0a2b4138dd8174889a6fabc5eddeb89279",
          "withoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509",
          "linkedWithoutMetadata": "1d719411a77ba8f8081d9ae63afc5eedc3231f5cec2395495b1cfee54f235509"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "4e6ec9a89ef24facfcf347dd06cb648544fe6d0ea6e3f8a629c361933c4e812d",
          "withoutMetadata": "28ac21e9a19233a5b8273cb6283497541306cafb9a6c64fb4b3e2451fd2b059c",
          "linkedWithoutMetadata": "28ac21e9a19233a5b8273cb6283497541306cafb9a6c64fb4b3e2451fd2b059c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "balance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)694",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)2047",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)694": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)2047": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "b021684b2e22bfd40f2699cb67f1e3fc6db18d527c4466e701480c43922114d2",
          "withoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a",
          "linkedWithoutMetadata": "8a66edc0feea9de1e5959d259d22c16e760f120a23e7394733642b86afd82f6a"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}